/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package joe;

import ManejoDeArchivos.XMLConfiguracion;
import db_managment.Direct_Control_BD;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Oscar Montes
 */
public class Pan_Dev extends javax.swing.JPanel {

    /**
     * Creates new form JPanel_Facturacion
     */
    public static String detalleEliminacionDev = "Elimacion Dev";
    public static String clienteGenerico = "Cliente Generico";
    public static String mensajeNoSeleccion = "No se ha seleccionado ninguna devolucion";

    public Pan_Dev() {
        initComponents();
        completarTablaDevoluciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_Devoluciones = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(760, 400));
        setOpaque(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Devoluciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(jTable_Devoluciones);

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 350));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/addBtt.png"))); // NOI18N
        jLabel1.setToolTipText("Crear nueva factura");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/editBtt.png"))); // NOI18N
        jLabel2.setToolTipText("Editar factura seleccionada");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/trashBtt.png"))); // NOI18N
        jLabel3.setToolTipText("Borrar factura seleccionada");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/watchBtt.png"))); // NOI18N
        jLabel4.setToolTipText("Ver factura seleccionada");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 360, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void devolverProductosDev(int NumFact) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verProductosPorDevolucion(NumFact);
        Object[][] ProductosdeDevolucion = AdminBD.getData();
        int numFilas = ProductosdeDevolucion.length;
        for (int row = 0; row < numFilas; row++) {
            Object[] producto = ProductosdeDevolucion[row];
            String codArticulo = producto[0].toString();
            BigDecimal precio = this.StringtoBigDecimal(producto[3].toString());
            int idVersion = AdminBD.veridVersionActivaProductoPorCodigo(codArticulo);
            int cantidad = Integer.parseInt(producto[2].toString());
            this.crearMovimiento(detalleEliminacionDev + " " + NumFact, precio, 2);
            this.guardaProductoEnMovimiento(codArticulo, idVersion, cantidad, precio);

        }
    }
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        //****************** INTERFAZ ***************************************

        Pan_NuevaFactura panelNuevaFact = new Pan_NuevaFactura(Pan_NuevaFactura.DEVOLUCION_CALL);

        JF_Facturacion.getInstance().getPanelManager().showPanel(panelNuevaFact, 800, 474, 0, 0);
        JF_Facturacion.getInstance().setEnableTabs(false);

        //*******************************************************************
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        String factura = Integer.toString(AdminBD.ObtenerUltimoidDev() + 1);
        panelNuevaFact.jLabel_NumerodeFact.setText(factura);
        panelNuevaFact.personalizarTablaFactura();
        panelNuevaFact.agregarListenerRenders();
        panelNuevaFact.jFormattedTextField_Cliente.setText(clienteGenerico);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        XMLConfiguracion conf = new XMLConfiguracion();
        String usuarioActual = conf.ObtenerTipoUsuario();

        if ("admi".equals(usuarioActual)|| "joe".equals(conf.ObtenerUsuario())) {
            this.modificarDev(this.jTable_Devoluciones, Pan_NuevaFactura.MOD_DEV_CALL);
        } else {
            JOptionPane.showMessageDialog(this, "Necesitas permisos de "
                    + "administrador para poder continuar",
                    "¡Alerta!",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked

        XMLConfiguracion conf = new XMLConfiguracion();
        String TipousuarioActual = conf.ObtenerTipoUsuario();

        if ("admi".equals(TipousuarioActual)|| "joe".equals(conf.ObtenerUsuario())) {
            String[] options = {"Aceptar","Cancelar"};
            int selection = JOptionPane.showOptionDialog(this, "Desea eliminar la factura", "¡Atención!", 0, 0, null, options, 0);
            if (selection == 0){
                this.eliminarDev(this.jTable_Devoluciones);
                this.completarTablaDevoluciones();
            }
                
        } else {
            JOptionPane.showMessageDialog(this, "Necesitas permisos de "
                    + "administrador para poder continuar",
                    "¡Alerta!",
                    JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        this.verDevoluciones(this.jTable_Devoluciones);
    }//GEN-LAST:event_jLabel4MouseClicked

    /**
     * Este metodo permite corregir el dato que tiene el signo de C y ademas que
     * puede tener comas ya que el tipo Decimal en la base solo puede tener
     * puntos y no comas.
     *
     * @param Dato
     * @return
     */
    private BigDecimal corregirDato(String Dato) {
        String datoAcorregir = Dato.replace("C", "");
        DecimalFormat decimalformat = (DecimalFormat) NumberFormat.getInstance();
        decimalformat.setParseBigDecimal(true);
        BigDecimal DatoCorregido = null;
        try {
            DatoCorregido = (BigDecimal) decimalformat.parseObject(datoAcorregir);
        } catch (ParseException ex) {
            Logger.getLogger(MyTableModelListener_FACT.class.getName()).log(Level.SEVERE, null, ex);
        }
        return DatoCorregido;

    }

    /**
     * Este metodo convierte un string que es un decimal a bigdecimal
     *
     * @param numero
     * @return
     */
    private BigDecimal StringtoBigDecimal(String numero) {
        DecimalFormat decimalfC = (DecimalFormat) NumberFormat.getInstance();
        decimalfC.setParseBigDecimal(true);
        BigDecimal numeroCorregido = null;
        try {
            numeroCorregido = (BigDecimal) decimalfC.parseObject(numero);
        } catch (ParseException ex) {
            Logger.getLogger(JPanel_VerFactura.class.getName()).log(Level.SEVERE, null, ex);
        }
        return numeroCorregido;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JScrollPane jScrollPane5;
    javax.swing.JTable jTable_Devoluciones;
    // End of variables declaration//GEN-END:variables

    private void crearMovimiento(String detalle, BigDecimal precioProd, int movimiento) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.insertarmovimiento(detalle, movimiento, 1, precioProd);
    }

    private void guardaProductoEnMovimiento(String idProducto, int idVersion, int cantidadMov, BigDecimal PrecioVenta) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        int idMovimiento = AdminBD.ObtenerUltimoidMovimiento();
        AdminBD.insertarProductoCantidadMovimiento(idProducto, idVersion, idMovimiento, cantidadMov, PrecioVenta);
    }

    void completarTablaDevoluciones() {
        //Realiza la consulta para obtener los creditos
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verDevoluciones();
        String[] columnNames = AdminBD.getColumnNames();
        Object[][] data = AdminBD.getData();
        //Crea la tabla generica para Facturas
        this.jTable_Devoluciones.setModel(new Modelo_Facturacion(columnNames, data));
        //Alinea la primer columna de esta tabla hacia el centro
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        this.jTable_Devoluciones.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
    }

    private void verDevoluciones(JTable table) {
        int row = table.getSelectedRow();
        if (row >= 0) {
            //***********************INTERFAZ***************************************

            Pan_VerFactura panelVerFact = new Pan_VerFactura();
            JF_Facturacion.getInstance().getPanelManager().showPanel(panelVerFact, 800, 474, 0, 0);
            JF_Facturacion.getInstance().setEnableTabs(false);

            //**********************************************************************
            Modelo_Facturacion model = (Modelo_Facturacion) table.getModel();
            panelVerFact.jLabel_NumerodeFact.setText(model.getValueAt(row, 0).toString());
            panelVerFact.personalizarTablaVerDevoluciones();
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    mensajeNoSeleccion,
                    "Alert!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarDev(JTable table, int pCallType) {
        int row = table.getSelectedRow();
        if (row < 0) {

            JOptionPane.showMessageDialog(
                    null,
                    mensajeNoSeleccion,
                    "Alert!", JOptionPane.ERROR_MESSAGE);
            return;

        }
        String factura = table.getValueAt(row, 0).toString();
        boolean SiSepuedeModificar = this.verificarCierreDevs(Integer.parseInt(factura));
        if (SiSepuedeModificar) {

            Pan_NuevaFactura panelModDev = new Pan_NuevaFactura(pCallType);

            JF_Facturacion.getInstance().getPanelManager().showPanel(panelModDev, 800, 474, 0, 0);
            JF_Facturacion.getInstance().setEnableTabs(false);

            panelModDev.personalizarTablaFactura();
            panelModDev.jLabel_NumerodeFact.setText(factura);
            panelModDev.cargarInfoDev();
            panelModDev.cargarProductosDevolucion();
            panelModDev.agregarListenerRenders();
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "No se puede modificar la devolucion porque ya pertenece a un cierre de caja",
                    "Alert!", JOptionPane.ERROR_MESSAGE);

        }

    }

    private void eliminarDev(JTable table) {
        int row = table.getSelectedRow();
        if (row < 0) {

            JOptionPane.showMessageDialog(
                    null,
                    mensajeNoSeleccion,
                    "Alert!", JOptionPane.ERROR_MESSAGE);
            return;

        }
        String factura = table.getValueAt(row, 0).toString();
        boolean SiSepuedeModificar = this.verificarCierreDevs(Integer.parseInt(factura));
        if (SiSepuedeModificar) {

            Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
            int numFact = Integer.parseInt(table.getValueAt(row, 0).toString());
            this.devolverProductosDev(numFact);
            int idVersion = AdminBD.verVersionDEDevolucionActiva(numFact);
            AdminBD.eliminarDevolucion(numFact, idVersion);

        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "No se puede eliminar una devolucion que pertence a un cierre de caja",
                    "Alert!", JOptionPane.ERROR_MESSAGE);

        }
    }

    private boolean verificarCierreDevs(int idDev) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        int idCierreVigente = AdminBD.obtenerultimoidCierre();
        String fechaInicio = AdminBD.obtenerFechaInicioCierre(idCierreVigente);
        boolean Sisepuede = AdminBD.verificarDevCierre(fechaInicio, idDev);
        return Sisepuede;
    }

}
