/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package joe;

import ManejoDeArchivos.XMLConfiguracion;
import db_managment.Direct_Control_BD;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DocumentFilter;
import jzebra.PrintRaw;
import jzebra.PrintServiceMatcher;

/**
 *
 * @author Oscar Montes
 */
public class Pan_NuevaFactura extends javax.swing.JPanel {

    public static final int FACTURACION_CALL = 0;
    public static final int DEVOLUCION_CALL  = 1;
    public static final int CREDITO_CALL     = 2;
    public static final int APARTADO_CALL    = 3;
    public static final int MOD_FACT_CALL    = 4;
    public static final int MOD_DEV_CALL     = 5;
    public static final int MOD_CRED_CALL    = 6;
    public static final int MOD_APART_CALL   = 7;
    
    public static final String CONCEPT_FACTURA ="Cancelada";
    public static final String CONCEPT_APARTADO ="Apartado";
    public static final String CONCEPT_CREDITO= "Credito";
    public static final String CONCEPT_DEVOLUCION="Devolucion";
    public static final String DETALLE_FACT= "Fact Num ";
    public static final String DETALLE_APART="Apartado Num Fact ";
    public static final String DETALLE_CRED="Credito Num Fact ";
    
    public int _callType;
    
    private boolean _savePress;
    private boolean _printPress;
    
    private boolean _justSave;
    
    /**
     * Creates new form NewJPanel
     * @param pCallType
     */
    public Pan_NuevaFactura(int pCallType) {
        _callType = pCallType;
        _justSave = true;
        _savePress = false;
        _printPress = false;
        initComponents();
        setTittle();
        
    }
    
    public void refreshFocus(){
        jTable_Factura.requestFocusInWindow();

    }

    private void setTittle(){
        if (_callType == FACTURACION_CALL || _callType == MOD_FACT_CALL){
            lblTittle.setText("Facturación");
        } else if (_callType == APARTADO_CALL || _callType == MOD_APART_CALL){
            lblTittle.setText("Apartado");
        } else if (_callType == DEVOLUCION_CALL || _callType == MOD_DEV_CALL){
            lblTittle.setText("Devolución");
        } else if (_callType == CREDITO_CALL || _callType == MOD_CRED_CALL){
            lblTittle.setText("Crédito");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jDialog_CrearProducto = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jTextField_codigo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton_CrearProducto = new javax.swing.JButton();
        jButton_CancelarCrearProducto = new javax.swing.JButton();
        jFormattedTextField_precioProducto = new javax.swing.JFormattedTextField();
        jFormattedTextField_cantidadProducto = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jDialog_VerProducto = new javax.swing.JDialog();
        jLayeredPane_VerProducto = new javax.swing.JLayeredPane();
        jLabel_Nombre = new javax.swing.JLabel();
        jLabel_Cantidad = new javax.swing.JLabel();
        jLabel_PrecioUnitario = new javax.swing.JLabel();
        jLabel_datoNomb = new javax.swing.JLabel();
        jLabel_datoCant = new javax.swing.JLabel();
        jLabel_datoPrecio = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel_Descripcion = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel_datoDescrip = new javax.swing.JLabel();
        jDialog_BuscarProductoPorCod = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jButton_BusqueProducto = new javax.swing.JButton();
        jButton_CancelaBusquedaProducto = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField_busqueProducto = new javax.swing.JTextField();
        jLabel_CodNoEncontrado = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jDialog_DescuentoUnitario = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel_DescripcionDescUnitario = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton_IngresarDescuento = new javax.swing.JButton();
        jButton_CancelarDescuentoUnitario = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jFormattedTextField_PrecioRegular = new javax.swing.JFormattedTextField();
        jFormattedTextField_descUnitario = new javax.swing.JFormattedTextField();
        jFormattedTextField_RebajaDelDesc = new javax.swing.JFormattedTextField();
        jFormattedTextField_PrecioConDesc = new javax.swing.JFormattedTextField();
        jLabel19 = new javax.swing.JLabel();
        jDialog_CrearCliente = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jLabel_nombreCliente = new javax.swing.JLabel();
        jLabel_telefonoCliente = new javax.swing.JLabel();
        jLabel_direccionCliente = new javax.swing.JLabel();
        jLabel_FechaCumpleanos = new javax.swing.JLabel();
        jFormattedTextField_nombreCliente = new javax.swing.JFormattedTextField();
        jFormattedTextField_telefono = new javax.swing.JFormattedTextField();
        jFormattedTextField_direccionCliente = new javax.swing.JFormattedTextField();
        jFormattedTextField_fechaCumple = new javax.swing.JFormattedTextField();
        jButton_CrearCliente = new javax.swing.JButton();
        jButton_CancelarCrearCliente = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jDialog_darVuelto = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jFormattedTextField_totalFact = new javax.swing.JFormattedTextField();
        jFormattedTextField_pagoVueltoContado = new javax.swing.JFormattedTextField();
        jFormattedTextField_vuelto = new javax.swing.JFormattedTextField();
        jButton_aceptarVuelto = new javax.swing.JButton();
        lbPagoTitle = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jFormattedTextField_pagoVueltoTarjeta = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Factura = new javax.swing.JTable();
        jFormattedTextField_SubTotal = new javax.swing.JFormattedTextField();
        jLabel_Fecha = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jFormattedTextField_desc = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jTextField_Detalle = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jFormattedTextField_DescuentoTotal = new javax.swing.JFormattedTextField();
        jFormattedTextField_Total = new javax.swing.JFormattedTextField();
        lblTittle = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jFormattedTextField_Cliente = new javax.swing.JFormattedTextField();
        jLabel_NumerodeFact = new javax.swing.JLabel();
        addBtt = new javax.swing.JLabel();
        trashBtt = new javax.swing.JLabel();
        watchBtt = new javax.swing.JLabel();
        discBtt = new javax.swing.JLabel();
        saveBtt = new javax.swing.JLabel();
        searchBtt = new javax.swing.JLabel();
        printBtt = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        jDialog_CrearProducto.setTitle("Crear Producto");
        jDialog_CrearProducto.setMinimumSize(new java.awt.Dimension(400, 230));
        jDialog_CrearProducto.setUndecorated(true);
        jDialog_CrearProducto.setResizable(false);
        jDialog_CrearProducto.setLocationRelativeTo(null);
        jDialog_CrearProducto.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField_codigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_codigoKeyTyped(evt);
            }
        });
        jPanel2.add(jTextField_codigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 52, 240, -1));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Codigo del Producto");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 55, 120, -1));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre del Producto");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 93, 120, -1));

        jTextField_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_nombreKeyTyped(evt);
            }
        });
        jPanel2.add(jTextField_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 90, 240, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Precio del Producto");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 131, 120, -1));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Cantidad del Producto");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 162, 130, -1));

        jButton_CrearProducto.setText("Aceptar");
        jButton_CrearProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CrearProductoActionPerformed(evt);
            }
        });
        jButton_CrearProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_CrearProductoKeyPressed(evt);
            }
        });
        jPanel2.add(jButton_CrearProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, -1, -1));

        jButton_CancelarCrearProducto.setText("Cancelar");
        jButton_CancelarCrearProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelarCrearProductoActionPerformed(evt);
            }
        });
        jButton_CancelarCrearProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_CancelarCrearProductoKeyPressed(evt);
            }
        });
        jPanel2.add(jButton_CancelarCrearProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 190, -1, -1));

        jFormattedTextField_precioProducto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jFormattedTextField_precioProducto.setText("0.00");
        jFormattedTextField_precioProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFormattedTextField_precioProductoFocusGained(evt);
            }
        });
        jFormattedTextField_precioProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFormattedTextField_precioProductoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_precioProductoKeyTyped(evt);
            }
        });
        jPanel2.add(jFormattedTextField_precioProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 128, 240, -1));

        jFormattedTextField_cantidadProducto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_cantidadProducto.setText("0");
        jFormattedTextField_cantidadProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFormattedTextField_cantidadProductoFocusGained(evt);
            }
        });
        jFormattedTextField_cantidadProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFormattedTextField_cantidadProductoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_cantidadProductoKeyTyped(evt);
            }
        });
        jPanel2.add(jFormattedTextField_cantidadProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(146, 159, 240, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Crear Producto");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 12, -1, -1));

        jDialog_CrearProducto.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 230));

        jDialog_VerProducto.setTitle("Ver Producto");
        jDialog_VerProducto.setMinimumSize(new java.awt.Dimension(470, 210));
        jDialog_VerProducto.setModal(true);
        jDialog_VerProducto.setUndecorated(true);
        jDialog_VerProducto.setResizable(false);
        jDialog_VerProducto.setLocationRelativeTo(null);
        jDialog_VerProducto.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLayeredPane_VerProducto.setBackground(new java.awt.Color(153, 153, 153));
        jLayeredPane_VerProducto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLayeredPane_VerProducto.setMaximumSize(new java.awt.Dimension(470, 210));
        jLayeredPane_VerProducto.setMinimumSize(new java.awt.Dimension(470, 210));
        jLayeredPane_VerProducto.setOpaque(true);
        jLayeredPane_VerProducto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_Nombre.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Nombre.setText("Nombre");
        jLayeredPane_VerProducto.add(jLabel_Nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 60, 29));

        jLabel_Cantidad.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Cantidad.setText("Cantidad");
        jLayeredPane_VerProducto.add(jLabel_Cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 60, 29));

        jLabel_PrecioUnitario.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_PrecioUnitario.setText("Precio Unitario");
        jLayeredPane_VerProducto.add(jLabel_PrecioUnitario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 90, 29));

        jLabel_datoNomb.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel_datoNomb.setForeground(new java.awt.Color(0, 51, 51));
        jLabel_datoNomb.setText("NOMBRE DEL PRODUCTO");
        jLayeredPane_VerProducto.add(jLabel_datoNomb, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 360, 29));

        jLabel_datoCant.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel_datoCant.setForeground(new java.awt.Color(0, 51, 51));
        jLabel_datoCant.setText("CANTIDAD");
        jLayeredPane_VerProducto.add(jLabel_datoCant, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 360, 29));

        jLabel_datoPrecio.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel_datoPrecio.setForeground(new java.awt.Color(0, 51, 51));
        jLabel_datoPrecio.setText("PRECIO UNITARIO");
        jLayeredPane_VerProducto.add(jLabel_datoPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 360, 29));

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 51, 51));
        jButton2.setText("Aceptar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });
        jLayeredPane_VerProducto.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 170, 81, -1));

        jLabel_Descripcion.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Descripcion.setText("Descripcion");
        jLayeredPane_VerProducto.add(jLabel_Descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 70, 29));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Ver Producto");
        jLayeredPane_VerProducto.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 18, -1, -1));

        jLabel_datoDescrip.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel_datoDescrip.setForeground(new java.awt.Color(0, 51, 51));
        jLabel_datoDescrip.setText("DESCRIPCION");
        jLayeredPane_VerProducto.add(jLabel_datoDescrip, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 360, 29));

        jDialog_VerProducto.getContentPane().add(jLayeredPane_VerProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 210));

        jDialog_BuscarProductoPorCod.setTitle("Buscar Producto");
        jDialog_BuscarProductoPorCod.setMinimumSize(new java.awt.Dimension(320, 130));
        jDialog_BuscarProductoPorCod.setUndecorated(true);
        jDialog_BuscarProductoPorCod.setResizable(false);
        jDialog_BuscarProductoPorCod.setLocationRelativeTo(null);
        jDialog_BuscarProductoPorCod.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(295, 125));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_BusqueProducto.setText("Buscar");
        jButton_BusqueProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_BusqueProductoActionPerformed(evt);
            }
        });
        jButton_BusqueProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_BusqueProductoKeyPressed(evt);
            }
        });
        jPanel1.add(jButton_BusqueProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, -1, -1));

        jButton_CancelaBusquedaProducto.setText("Cancelar");
        jButton_CancelaBusquedaProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelaBusquedaProductoActionPerformed(evt);
            }
        });
        jPanel1.add(jButton_CancelaBusquedaProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, -1, -1));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Ingrese el Codigo");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 55, -1, -1));

        jTextField_busqueProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_busqueProductoKeyPressed(evt);
            }
        });
        jPanel1.add(jTextField_busqueProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 185, -1));
        jPanel1.add(jLabel_CodNoEncontrado, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 119, 81, 13));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Buscar Producto");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 12, -1, -1));

        jDialog_BuscarProductoPorCod.getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 130));

        jDialog_DescuentoUnitario.setTitle("Descuento Unitario");
        jDialog_DescuentoUnitario.setMinimumSize(new java.awt.Dimension(430, 215));
        jDialog_DescuentoUnitario.setUndecorated(true);
        jDialog_DescuentoUnitario.setResizable(false);
        jDialog_DescuentoUnitario.setLocationRelativeTo(null);
        jDialog_DescuentoUnitario.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setPreferredSize(new java.awt.Dimension(429, 214));

        jLabel_DescripcionDescUnitario.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel_DescripcionDescUnitario.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_DescripcionDescUnitario.setText("Descripcion");

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Precio Regular");

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Desc en %");

        jButton_IngresarDescuento.setText("Aceptar");
        jButton_IngresarDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_IngresarDescuentoActionPerformed(evt);
            }
        });
        jButton_IngresarDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_IngresarDescuentoKeyPressed(evt);
            }
        });

        jButton_CancelarDescuentoUnitario.setText("Cancelar");
        jButton_CancelarDescuentoUnitario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelarDescuentoUnitarioActionPerformed(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Precio con Desc");

        jFormattedTextField_PrecioRegular.setEditable(false);
        jFormattedTextField_PrecioRegular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("C#,##0.00;(C#,##0.00)"))));
        jFormattedTextField_PrecioRegular.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextField_PrecioRegular.setText("0.00");
        jFormattedTextField_PrecioRegular.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField_PrecioRegularPropertyChange(evt);
            }
        });

        jFormattedTextField_descUnitario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jFormattedTextField_descUnitario.setText("0.00");
        jFormattedTextField_descUnitario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextField_descUnitarioMouseClicked(evt);
            }
        });
        jFormattedTextField_descUnitario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField_descUnitarioPropertyChange(evt);
            }
        });
        jFormattedTextField_descUnitario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFormattedTextField_descUnitarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_descUnitarioKeyTyped(evt);
            }
        });

        jFormattedTextField_RebajaDelDesc.setEditable(false);
        jFormattedTextField_RebajaDelDesc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("C#,##0.00;(C#,##0.00)"))));
        jFormattedTextField_RebajaDelDesc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextField_RebajaDelDesc.setText("0.00");

        jFormattedTextField_PrecioConDesc.setEditable(false);
        jFormattedTextField_PrecioConDesc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("C#,##0.00;(C#,##0.00)"))));
        jFormattedTextField_PrecioConDesc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextField_PrecioConDesc.setText("0.00");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Descuento Unitario");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jFormattedTextField_descUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_DescripcionDescUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 27, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jFormattedTextField_PrecioRegular)
                            .addComponent(jFormattedTextField_RebajaDelDesc)
                            .addComponent(jFormattedTextField_PrecioConDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton_IngresarDescuento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_CancelarDescuentoUnitario))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_DescripcionDescUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_PrecioRegular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_descUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_RebajaDelDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_PrecioConDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_CancelarDescuentoUnitario)
                    .addComponent(jButton_IngresarDescuento))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDialog_DescuentoUnitario.getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, -1));

        jDialog_CrearCliente.setTitle("Crear Cliente");
        jDialog_CrearCliente.setMinimumSize(new java.awt.Dimension(330, 230));
        jDialog_CrearCliente.setModal(true);
        jDialog_CrearCliente.setUndecorated(true);
        jDialog_CrearCliente.setResizable(false);
        jDialog_CrearCliente.setLocationRelativeTo(null);
        jDialog_CrearCliente.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_nombreCliente.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_nombreCliente.setText("Nombre del Cliente");
        jPanel4.add(jLabel_nombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 55, -1, -1));

        jLabel_telefonoCliente.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_telefonoCliente.setText("Telefono");
        jPanel4.add(jLabel_telefonoCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 86, 105, -1));

        jLabel_direccionCliente.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_direccionCliente.setText("Direccion");
        jPanel4.add(jLabel_direccionCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 116, 105, -1));

        jLabel_FechaCumpleanos.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_FechaCumpleanos.setText("Fecha de Cumpleanos");
        jPanel4.add(jLabel_FechaCumpleanos, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 154, -1, -1));

        jFormattedTextField_nombreCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_nombreClienteKeyTyped(evt);
            }
        });
        jPanel4.add(jFormattedTextField_nombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 52, 168, -1));

        jFormattedTextField_telefono.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        jFormattedTextField_telefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_telefonoKeyTyped(evt);
            }
        });
        jPanel4.add(jFormattedTextField_telefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 83, 168, -1));

        jFormattedTextField_direccionCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_direccionClienteKeyTyped(evt);
            }
        });
        jPanel4.add(jFormattedTextField_direccionCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 113, 168, -1));

        jFormattedTextField_fechaCumple.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_fechaCumpleKeyTyped(evt);
            }
        });
        jPanel4.add(jFormattedTextField_fechaCumple, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 151, 168, -1));

        jButton_CrearCliente.setText("Aceptar");
        jButton_CrearCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CrearClienteActionPerformed(evt);
            }
        });
        jButton_CrearCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_CrearClienteKeyPressed(evt);
            }
        });
        jPanel4.add(jButton_CrearCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 197, -1, -1));

        jButton_CancelarCrearCliente.setText("Cancelar");
        jButton_CancelarCrearCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelarCrearClienteActionPerformed(evt);
            }
        });
        jPanel4.add(jButton_CancelarCrearCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 197, -1, -1));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Crear Cliente");
        jPanel4.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 12, -1, -1));

        jDialog_CrearCliente.getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 330, 230));

        jDialog_darVuelto.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog_darVuelto.setMinimumSize(new java.awt.Dimension(370, 290));
        jDialog_darVuelto.setModal(true);
        jDialog_darVuelto.setUndecorated(true);
        jDialog_darVuelto.setResizable(false);
        jDialog_darVuelto.setSize(407, 325);
        jDialog_darVuelto.setLocationRelativeTo(null);

        if (_callType == APARTADO_CALL){
            lbPagoTitle.setText("Pago de apartado");
        } else if (_callType == FACTURACION_CALL){
            lbPagoTitle.setText("Pago de factura");
        } else if (_callType == CREDITO_CALL){
            lbPagoTitle.setText("Pago de crédito");
        }

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setLayout(null);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Total Facturado");
        jPanel5.add(jLabel23);
        jLabel23.setBounds(50, 50, 150, 50);

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Pago de contado");
        jPanel5.add(jLabel24);
        jLabel24.setBounds(50, 160, 120, 50);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Vuelto");
        jPanel5.add(jLabel25);
        jLabel25.setBounds(50, 210, 130, 50);

        jFormattedTextField_totalFact.setEditable(false);
        jFormattedTextField_totalFact.setForeground(new java.awt.Color(255, 0, 0));
        jFormattedTextField_totalFact.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("C#,##0.00;(C#,##0.00)"))));
        jFormattedTextField_totalFact.setText("0.00");
        jFormattedTextField_totalFact.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel5.add(jFormattedTextField_totalFact);
        jFormattedTextField_totalFact.setBounds(180, 60, 180, 40);

        jFormattedTextField_pagoVueltoContado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jFormattedTextField_pagoVueltoContado.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jFormattedTextField_pagoVueltoContado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextField_pagoVueltoContadoMouseClicked(evt);
            }
        });
        jFormattedTextField_pagoVueltoContado.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField_pagoVueltoContadoPropertyChange(evt);
            }
        });
        jFormattedTextField_pagoVueltoContado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFormattedTextField_pagoVueltoContadoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_pagoVueltoContadoKeyTyped(evt);
            }
        });
        jPanel5.add(jFormattedTextField_pagoVueltoContado);
        jFormattedTextField_pagoVueltoContado.setBounds(180, 170, 180, 40);

        jFormattedTextField_vuelto.setEditable(false);
        jFormattedTextField_vuelto.setForeground(new java.awt.Color(51, 0, 255));
        jFormattedTextField_vuelto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jFormattedTextField_vuelto.setText("0.00");
        jFormattedTextField_vuelto.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel5.add(jFormattedTextField_vuelto);
        jFormattedTextField_vuelto.setBounds(180, 220, 180, 40);

        jButton_aceptarVuelto.setText("Aceptar");
        jButton_aceptarVuelto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_aceptarVueltoActionPerformed(evt);
            }
        });
        jButton_aceptarVuelto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_aceptarVueltoKeyPressed(evt);
            }
        });
        jPanel5.add(jButton_aceptarVuelto);
        jButton_aceptarVuelto.setBounds(180, 280, 70, 30);

        lbPagoTitle.setBackground(new java.awt.Color(0, 153, 255));
        lbPagoTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbPagoTitle.setForeground(new java.awt.Color(255, 255, 255));
        lbPagoTitle.setText("  Pago de factura");
        lbPagoTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPagoTitle.setOpaque(true);
        jPanel5.add(lbPagoTitle);
        lbPagoTitle.setBounds(0, 0, 407, 40);

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Pago con tarjeta");
        jPanel5.add(jLabel27);
        jLabel27.setBounds(50, 100, 120, 50);

        jFormattedTextField_pagoVueltoTarjeta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jFormattedTextField_pagoVueltoTarjeta.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jFormattedTextField_pagoVueltoTarjeta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextField_pagoVueltoTarjetaMouseClicked(evt);
            }
        });
        jFormattedTextField_pagoVueltoTarjeta.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField_pagoVueltoTarjetaPropertyChange(evt);
            }
        });
        jFormattedTextField_pagoVueltoTarjeta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFormattedTextField_pagoVueltoTarjetaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_pagoVueltoTarjetaKeyTyped(evt);
            }
        });
        jPanel5.add(jFormattedTextField_pagoVueltoTarjeta);
        jFormattedTextField_pagoVueltoTarjeta.setBounds(180, 110, 180, 40);

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1);
        jButton1.setBounds(270, 280, 90, 30);

        jDialog_darVuelto.getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        setOpaque(false);
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLayeredPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLayeredPane1KeyPressed(evt);
            }
        });

        jTable_Factura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable_Factura.setCellSelectionEnabled(true);
        jTable_Factura.setFillsViewportHeight(true);
        jTable_Factura.setSurrendersFocusOnKeystroke(true);
        jTable_Factura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable_FacturaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_Factura);

        jLayeredPane1.add(jScrollPane2);
        jScrollPane2.setBounds(60, 40, 730, 330);

        jFormattedTextField_SubTotal.setEditable(false);
        jFormattedTextField_SubTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("C#,##0.00;(C#,##0.00)"))));
        jFormattedTextField_SubTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextField_SubTotal.setText("0.00");
        jFormattedTextField_SubTotal.setFocusable(false);
        jFormattedTextField_SubTotal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField_SubTotalPropertyChange(evt);
            }
        });
        jLayeredPane1.add(jFormattedTextField_SubTotal);
        jFormattedTextField_SubTotal.setBounds(410, 390, 100, 30);

        jLabel_Fecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Fecha.setText("Aqui va la fecha");
        jLayeredPane1.add(jLabel_Fecha);
        jLabel_Fecha.setBounds(670, 40, 120, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("SubTotal");
        jLayeredPane1.add(jLabel6);
        jLabel6.setBounds(340, 400, 60, 20);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Desc.");
        jLayeredPane1.add(jLabel7);
        jLabel7.setBounds(300, 430, 40, 30);

        jFormattedTextField_desc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jFormattedTextField_desc.setText("0.00");
        jFormattedTextField_desc.setToolTipText("Descuento sobre el subtotal");
        jFormattedTextField_desc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextField_descMouseClicked(evt);
            }
        });
        jFormattedTextField_desc.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField_descPropertyChange(evt);
            }
        });
        jFormattedTextField_desc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFormattedTextField_descKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextField_descKeyTyped(evt);
            }
        });
        jLayeredPane1.add(jFormattedTextField_desc);
        jFormattedTextField_desc.setBounds(340, 430, 50, 30);

        jLabel8.setText("%");
        jLayeredPane1.add(jLabel8);
        jLabel8.setBounds(390, 430, 20, 30);

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/searchLttBtt.png"))); // NOI18N
        jLabel22.setToolTipText("Buscar cliente");
        jLabel22.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });
        jLayeredPane1.add(jLabel22);
        jLabel22.setBounds(505, 5, 20, 20);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jLayeredPane1.add(jSeparator3);
        jSeparator3.setBounds(520, 380, 10, 80);

        jTextField_Detalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_DetalleKeyPressed(evt);
            }
        });
        jLayeredPane1.add(jTextField_Detalle);
        jTextField_Detalle.setBounds(60, 400, 220, 30);

        jLabel11.setText("Detalle:");
        jLayeredPane1.add(jLabel11);
        jLabel11.setBounds(60, 380, 110, 14);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Total");
        jLayeredPane1.add(jLabel12);
        jLabel12.setBounds(590, 380, 60, 20);

        jFormattedTextField_DescuentoTotal.setEditable(false);
        jFormattedTextField_DescuentoTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("C#,##0.00;(C#,##0.00)"))));
        jFormattedTextField_DescuentoTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextField_DescuentoTotal.setText("0.00");
        jFormattedTextField_DescuentoTotal.setFocusable(false);
        jLayeredPane1.add(jFormattedTextField_DescuentoTotal);
        jFormattedTextField_DescuentoTotal.setBounds(410, 430, 100, 30);

        jFormattedTextField_Total.setEditable(false);
        jFormattedTextField_Total.setForeground(new java.awt.Color(255, 0, 0));
        jFormattedTextField_Total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("C#,##0.00;(C#,##0.00)"))));
        jFormattedTextField_Total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextField_Total.setText("0.00");
        jFormattedTextField_Total.setFocusable(false);
        jFormattedTextField_Total.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLayeredPane1.add(jFormattedTextField_Total);
        jFormattedTextField_Total.setBounds(530, 410, 180, 50);

        lblTittle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTittle.setForeground(new java.awt.Color(255, 255, 255));
        lblTittle.setText("Facturación");
        jLayeredPane1.add(lblTittle);
        lblTittle.setBounds(10, 5, 160, 22);

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Cliente");
        jLayeredPane1.add(jLabel16);
        jLabel16.setBounds(190, 0, 60, 30);

        jFormattedTextField_Cliente.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jFormattedTextField_Cliente.setText("Cliente Generico");
        jFormattedTextField_Cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextField_ClienteMouseClicked(evt);
            }
        });
        jFormattedTextField_Cliente.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFormattedTextField_ClientePropertyChange(evt);
            }
        });
        jFormattedTextField_Cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFormattedTextField_ClienteKeyPressed(evt);
            }
        });
        jLayeredPane1.add(jFormattedTextField_Cliente);
        jFormattedTextField_Cliente.setBounds(230, 5, 270, 22);

        jLabel_NumerodeFact.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel_NumerodeFact.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_NumerodeFact.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_NumerodeFact.setText("Num");
        jLabel_NumerodeFact.setToolTipText("Número de factura");
        jLayeredPane1.add(jLabel_NumerodeFact);
        jLabel_NumerodeFact.setBounds(560, 5, 230, 19);

        addBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/addBtt.png"))); // NOI18N
        addBtt.setToolTipText("Agregar un nuevo producto a la base de datos");
        addBtt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addBtt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBttMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addBttMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addBttMouseExited(evt);
            }
        });
        jLayeredPane1.add(addBtt);
        addBtt.setBounds(4, 70, 40, 40);
        jLayeredPane1.setLayer(addBtt, javax.swing.JLayeredPane.PALETTE_LAYER);

        trashBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/trashBtt.png"))); // NOI18N
        trashBtt.setToolTipText("Eliminar fila seleccionada");
        trashBtt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        trashBtt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trashBttMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                trashBttMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                trashBttMouseExited(evt);
            }
        });
        jLayeredPane1.add(trashBtt);
        trashBtt.setBounds(4, 190, 40, 40);
        jLayeredPane1.setLayer(trashBtt, javax.swing.JLayeredPane.PALETTE_LAYER);

        watchBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/watchBtt.png"))); // NOI18N
        watchBtt.setToolTipText("Ver producto seleccionado (Si hay selección) - Buscar producto por código (Si no hay selección)");
        watchBtt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        watchBtt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                watchBttMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                watchBttMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                watchBttMouseExited(evt);
            }
        });
        jLayeredPane1.add(watchBtt);
        watchBtt.setBounds(4, 130, 40, 40);
        jLayeredPane1.setLayer(watchBtt, javax.swing.JLayeredPane.PALETTE_LAYER);

        discBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/discBtt.png"))); // NOI18N
        discBtt.setToolTipText("Aplicar un descuento unitario");
        discBtt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        discBtt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                discBttMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                discBttMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                discBttMouseExited(evt);
            }
        });
        jLayeredPane1.add(discBtt);
        discBtt.setBounds(4, 250, 40, 40);
        jLayeredPane1.setLayer(discBtt, javax.swing.JLayeredPane.PALETTE_LAYER);

        saveBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/saveBtt.png"))); // NOI18N
        saveBtt.setToolTipText("Guardar factura");
        saveBtt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        saveBtt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBttMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveBttMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveBttMouseExited(evt);
            }
        });
        jLayeredPane1.add(saveBtt);
        saveBtt.setBounds(740, 375, 40, 40);
        jLayeredPane1.setLayer(saveBtt, javax.swing.JLayeredPane.PALETTE_LAYER);

        searchBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/searchBtt.png"))); // NOI18N
        searchBtt.setToolTipText("Abrir el buscador de productos");
        searchBtt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchBtt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBttMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchBttMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchBttMouseExited(evt);
            }
        });
        jLayeredPane1.add(searchBtt);
        searchBtt.setBounds(4, 310, 40, 40);
        jLayeredPane1.setLayer(searchBtt, javax.swing.JLayeredPane.PALETTE_LAYER);

        printBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/printBtt.png"))); // NOI18N
        printBtt.setToolTipText("Guardar e imprimir factura");
        printBtt.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        printBtt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printBttMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                printBttMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                printBttMouseExited(evt);
            }
        });
        jLayeredPane1.add(printBtt);
        printBtt.setBounds(740, 425, 40, 40);
        jLayeredPane1.setLayer(printBtt, javax.swing.JLayeredPane.PALETTE_LAYER);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Panel1/panelNF.png"))); // NOI18N
        background.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                backgroundComponentHidden(evt);
            }
        });
        jLayeredPane1.add(background);
        background.setBounds(0, 0, 800, 474);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
        );
    }//GEN-END:initComponents
    private void creacionProductoPanel() {
        //En caso de que quiera crear un producto mientras se este editando
        if (jTable_Factura.isEditing()) {
            jTable_Factura.getCellEditor().cancelCellEditing();
        }
        DocumentFilter onlyNumberFilter = new MyFilter();
        ((AbstractDocument)this.jFormattedTextField_precioProducto.getDocument()).setDocumentFilter(onlyNumberFilter);
        //Llama a la ventana para crear el producto
        this.jDialog_CrearProducto.setVisible(true);

    }    /**
     * Este metodo permite mostrar toda la informacion del producto
     *
     * @param idProducto
     */
    private void verProducto(String idProducto) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        String articulo = AdminBD.verNombreProductoPorCodigo(idProducto);
        BigDecimal PrecioUnitario = AdminBD.verPrecio(idProducto);
        int cantidad = AdminBD.verCantidadInvGeneral(idProducto);
        jLabel_datoCant.setText(Integer.toString(cantidad));
        jLabel_datoNomb.setText(articulo);
        jLabel_datoPrecio.setText(PrecioUnitario.toString());
        String detalle = AdminBD.verDetalle(idProducto);
        //Si en la base el detalle es null
        //System.out.println("DETALLE = " + (detalle==null?"null":"".equals(detalle)?"vacío":detalle.toString()));
        if (detalle == null) {
            jLabel_datoDescrip.setText("Este producto no tiene ningún detalle");
        } else {
            jLabel_datoDescrip.setText(detalle);
        }
        jDialog_VerProducto.setVisible(true);

    }

    /**
     * Este metodo es para poder eliminar una fila de la tabla de crear factura
     */
    private void eliminarFila() {
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        int row = jTable_Factura.getSelectedRow();
        ///Si se esta escribiendo en la celda para el editor y luego elimina la
        // fila
        if (!model.data.isEmpty()) {
            if (jTable_Factura.isEditing()) {
                jTable_Factura.getCellEditor().cancelCellEditing();
                jTable_Factura.revalidate();
                jTable_Factura.repaint();
                jTable_Factura.requestFocus();

            }
            String subTotal = model.getValueAt(row, 4).toString();
            if (subTotal != "") {
                //Elimina un producto ya ingresado y actualiza el total
                BigDecimal subtotal = new BigDecimal(subTotal);
                model.removeRow(row);
                BigDecimal totalFact = this.corregirDato(
                        this.jFormattedTextField_SubTotal.getText());
                this.jFormattedTextField_SubTotal.setValue(
                        totalFact.subtract(subtotal));
                jTable_Factura.changeSelection(row-1,0,false, false);
                jTable_Factura.revalidate();
                jTable_Factura.repaint();
                jTable_Factura.requestFocus();
            } else { //Si es vacio el subtotal significa que no tiene que actualizar
                // el subtotal
                model.removeRow(row);
                jTable_Factura.changeSelection(row-1,0,false, false);
                jTable_Factura.revalidate();
                jTable_Factura.repaint();
                jTable_Factura.requestFocus();

            }
        }
        if (model.data.isEmpty()){
            model.addRow(1);
        }
    }    /**
     * Este metodo permite que se actualice el campo del total y la rebaja
     * cuando se inserta un descuento unitario en la tabla Factura.
     *
     * @param evt
     */
    private void jTable_FacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable_FacturaKeyPressed
        int tecla = evt.getKeyCode();
        if (tecla == KeyEvent.VK_F9) {
            this.eliminarFila();
        } else {
            hotKeyPressEvt(evt);
        }

    }//GEN-LAST:event_jTable_FacturaKeyPressed
    

    /**
     * Este metodo permite que vuelva a la tabla y seleciones la fila donde
     * quedo o la siguiente en la tabla facturacion
     *
     * @param cantidad
     */
    private void setFocusTablaFact(int cantidad) {
        jTable_Factura.revalidate();
        jTable_Factura.repaint();
        jTable_Factura.changeSelection(jTable_Factura.getSelectedRow()
                + cantidad, jTable_Factura.getSelectedColumn(), false, false);
        jTable_Factura.requestFocus();
    }

    /**
     * Este metodo crea un producto en factura
     */
    private void CrearProducto() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Date date = new Date();
        String codigo = this.jTextField_codigo.getText();
        
        
        if(codigo.equals("")){
            
             JOptionPane.showMessageDialog(
                    null,
                    "Por favor ingrese un codigo",
                    "Alert!", JOptionPane.ERROR_MESSAGE);
             this.jTextField_codigo.requestFocusInWindow();
             return;
        
        }
        if(this.jTextField_nombre.getText().equals("")){
            
             JOptionPane.showMessageDialog(
                    null,
                    "Por favor ingrese un nombre para el producto",
                    "Alert!", JOptionPane.ERROR_MESSAGE);
             this.jTextField_nombre.requestFocusInWindow();
             return;
        
        }
        boolean existeProducto = AdminBD.verSiExisteCod(codigo);
        if (!existeProducto) {
            BigDecimal precio_Producto = this.StringtoBigDecimal(this.jFormattedTextField_precioProducto.getText());
            BigDecimal cantidadBD = this.StringtoBigDecimal(this.jFormattedTextField_cantidadProducto.getText());
            int cantidad=Integer.parseInt(this.jFormattedTextField_cantidadProducto.getText()); 
           
            AdminBD.crearProducto(codigo, this.jTextField_nombre.getText(),
                    precio_Producto, BigDecimal.ZERO, dateFormat.format(date), "A", null, 1);
           
            this.crearMovimiento("Creacion Producto",precio_Producto.multiply(cantidadBD),1);
            int idVersion= AdminBD.veridVersionActivaProductoPorCodigo(codigo);
            this.guardaProductoEnMovimiento(codigo, idVersion, cantidad, precio_Producto);
            
            this.clearCrearProducto();
            this.jDialog_CrearProducto.dispose();
            MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
            model.setValueAt(codigo, jTable_Factura.getSelectedRow(), 0);
            //Vuelve a cargar la informacion para el editor de la primer columna
            this.cargarSeleccionadorProductos();
            this.clearCrearProducto();
            model.addRow(1);
            this.setFocusTablaFact(1);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "ESTE Cod ya existe en el inventario",
                    "Alert!", JOptionPane.ERROR_MESSAGE);
            this.jTextField_codigo.setText("");
            this.jButton_CrearProducto.transferFocus();
            this.jButton_CancelarCrearProducto.transferFocus();
        }
    }

    private void jButton_CrearProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CrearProductoActionPerformed
        this.CrearProducto();
        

    }//GEN-LAST:event_jButton_CrearProductoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setFocusTablaFact(0);
        this.jDialog_VerProducto.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    private void clearCrearProducto() {
        this.jTextField_codigo.setText("");
        this.jTextField_nombre.setText("");
        this.jFormattedTextField_cantidadProducto.setText("0");
        this.jFormattedTextField_precioProducto.setText("0.00");

    }
    private void jButton_CancelarCrearProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelarCrearProductoActionPerformed
        this.clearCrearProducto();
        this.jDialog_CrearProducto.dispose();
        //Para que el usuario se mantenga en la tabla
        this.setFocusTablaFact(0);
    }//GEN-LAST:event_jButton_CancelarCrearProductoActionPerformed

    private void jButton_CrearProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_CrearProductoKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            this.CrearProducto();
        }
    }//GEN-LAST:event_jButton_CrearProductoKeyPressed
    /**
     * Permite buscar el producto cuando el usuario presiona el boton buscar
     * producto en crear factura
     */
    private void buscarProducto() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        String idProducto = this.jTextField_busqueProducto.getText();
        boolean existeProducto = AdminBD.verSiExisteCod(idProducto);
        if (existeProducto) {
            this.jDialog_BuscarProductoPorCod.dispose();
            this.verProducto(idProducto);
            this.jTextField_busqueProducto.setText("");
            this.jLabel_CodNoEncontrado.setText("");
            return;
        }
        this.jLabel_CodNoEncontrado.setText("Cod. No Existe");
        this.jTextField_busqueProducto.setText("");
        this.jButton_BusqueProducto.transferFocus();
        this.jButton_CancelaBusquedaProducto.transferFocus();
    }

    private void jButton_BusqueProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_BusqueProductoActionPerformed
        this.buscarProducto();
    }//GEN-LAST:event_jButton_BusqueProductoActionPerformed

    private void jButton_CancelaBusquedaProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelaBusquedaProductoActionPerformed
        this.jDialog_BuscarProductoPorCod.dispose();
        this.jLabel_CodNoEncontrado.setText("");
        this.setFocusTablaFact(0);
    }//GEN-LAST:event_jButton_CancelaBusquedaProductoActionPerformed

    private void jTextField_busqueProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_busqueProductoKeyPressed
        if (evt.getKeyCode() == 10) {
            this.jTextField_busqueProducto.transferFocus();

        }
    }//GEN-LAST:event_jTextField_busqueProductoKeyPressed

    private void jButton_BusqueProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_BusqueProductoKeyPressed
        if (evt.getKeyCode() == 10) {
            this.buscarProducto();
        }
    }//GEN-LAST:event_jButton_BusqueProductoKeyPressed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        if (evt.getKeyCode() == 10) {
            this.setFocusTablaFact(0);
            this.jDialog_VerProducto.dispose();
        }

    }//GEN-LAST:event_jButton2KeyPressed
    private void jFormattedTextField_precioProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_precioProductoKeyTyped
         int tecla = evt.getKeyChar();
        if (tecla == KeyEvent.VK_COMMA) {
            return;
        }
        if (tecla == KeyEvent.VK_PERIOD) {
            return;
        }
        if (!Character.isDigit(tecla) & !Character.isISOControl(evt.getKeyChar())) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();

        }

        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jFormattedTextField_precioProducto.transferFocus();

        }

    }//GEN-LAST:event_jFormattedTextField_precioProductoKeyTyped
    private void jFormattedTextField_precioProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_precioProductoKeyPressed
        if (evt.isControlDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_jFormattedTextField_precioProductoKeyPressed

    private void jFormattedTextField_precioProductoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextField_precioProductoFocusGained
        this.jFormattedTextField_precioProducto.selectAll();
    }//GEN-LAST:event_jFormattedTextField_precioProductoFocusGained

    private void jFormattedTextField_cantidadProductoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextField_cantidadProductoFocusGained
        this.jFormattedTextField_cantidadProducto.selectAll();
    }//GEN-LAST:event_jFormattedTextField_cantidadProductoFocusGained

    private void jFormattedTextField_cantidadProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_cantidadProductoKeyPressed
        if (evt.isControlDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_jFormattedTextField_cantidadProductoKeyPressed

    private void jFormattedTextField_cantidadProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_cantidadProductoKeyTyped
        int tecla = evt.getKeyChar();

        if (!Character.isDigit(tecla) & !Character.isISOControl(evt.getKeyChar())) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();

        }

        int limite = 9;
        if (jFormattedTextField_cantidadProducto.getText().length() == limite) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jFormattedTextField_cantidadProducto.transferFocus();

        }
    }//GEN-LAST:event_jFormattedTextField_cantidadProductoKeyTyped
    /**
     * Este metodo permite guardar los productos en la factura que se esta
     * creando.
     */
    private void guardarProductosFactura() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        String[][] infoTablaFact = this.obtenerInfoTablaFact();
        int rows = infoTablaFact.length;
        int idFactura = Integer.parseInt(this.jLabel_NumerodeFact.getText());
        //Recorre la informacion de la tabla para obtener los datos para 
        //insertar los productos en la factura
        for (int i = 0; i < rows; i++) {
            //Si la fila esta vacia
            if (model.getValueAt(i, 0) != "") {
                String idProducto = infoTablaFact[i][0];
                int idVersion = AdminBD.veridVersionActivaProductoPorCodigo(idProducto);
                String CantidadSinCorregir = infoTablaFact[i][2].toString();
                BigDecimal cantidadB = this.StringtoBigDecimal(CantidadSinCorregir);
                int cantidad = cantidadB.intValue();
                String precioSinCorregir = infoTablaFact[i][3];
                BigDecimal PrecioVenta = this.corregirDato(precioSinCorregir);
                int idVersionFacturasProducto = AdminBD.verVersionDEFacturaActiva(idFactura);
                //System.out.println(idProducto+" "+idVersion+" "+cantidad+" "+idFactura+" "+PrecioVenta+" "+idVersionFacturasProducto);
                AdminBD.insertarProductoCantidadFact(idProducto, idVersion,
                        cantidad, idFactura, PrecioVenta, idVersionFacturasProducto);
                
                if (_callType == FACTURACION_CALL) {

                    this.crearMovimiento(DETALLE_FACT+""+idFactura, PrecioVenta.multiply(cantidadB), 2);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                }
                if(_callType == MOD_FACT_CALL){
                    this.eliminarMovimiento(DETALLE_FACT+""+idFactura);
                    this.crearMovimiento(DETALLE_FACT+""+idFactura, PrecioVenta.multiply(cantidadB),2);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                
                }
                if(_callType == APARTADO_CALL){
                    this.crearMovimiento(DETALLE_APART+""+idFactura, PrecioVenta.multiply(cantidadB),2);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                }
                if(_callType == MOD_APART_CALL){
                    this.eliminarMovimiento(DETALLE_APART+""+idFactura);
                    this.crearMovimiento(DETALLE_APART+""+idFactura, PrecioVenta.multiply(cantidadB),2);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                }
                
                if(_callType == CREDITO_CALL){
                    this.crearMovimiento(DETALLE_CRED+""+idFactura, PrecioVenta.multiply(cantidadB),2);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                }
                if(_callType == MOD_CRED_CALL){
                    this.eliminarMovimiento(DETALLE_CRED+""+idFactura);
                    this.crearMovimiento(DETALLE_CRED+""+idFactura, PrecioVenta.multiply(cantidadB),2);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                }
                

            }
        }
    }

    private boolean modFactSave(){
        this.devolverProductos();
        this.modificaFactura();
        return this.guardarFactura(CONCEPT_FACTURA);
    }
    
    private boolean modApartSave(){
        NewJDialog_PagoApartado pago = NewJDialog_PagoApartado.getInstance();
        pago.setTitle("Detalles del apartado");
        pago.setVisible(true);
        BigDecimal montodePago = pago.getMontoDePago();
        if (montodePago != null) {
            BigDecimal saldo = this.corregirDato(this.jFormattedTextField_Total.getValue().toString());
            if (montodePago.compareTo(saldo) < 0) {
                this.darVuelto(montodePago);
                return true;
                
            } else {
                JOptionPane.showMessageDialog(
                        null,
                        "Debe de ingresar un pago inferior al saldo porfavor",
                        "Alert!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return false;
    }
    
    private boolean apartSave(){
        NewJDialog_PagoApartado pago = NewJDialog_PagoApartado.getInstance();
        pago.setTitle("Detalles del apartado");
        pago.setVisible(true);
        BigDecimal montodePago = pago.getMontoDePago();
        if (montodePago != null) {
            BigDecimal saldo = this.corregirDato(this.jFormattedTextField_Total.getText());
            if (montodePago.compareTo(saldo) < 0) {
                this.darVuelto(montodePago);
                return true;

            } else {
                JOptionPane.showMessageDialog(
                        null,
                        "Debe de ingresar un pago inferior al saldo porfavor",
                        "Alert!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return false;
    }
    
    private boolean modCredSave(){
        NewJDialog_PagoApartado pago = NewJDialog_PagoApartado.getInstance();
        pago.setVisible(true);
        BigDecimal montodePago = pago.getMontoDePago();
        if (montodePago != null) {
            BigDecimal saldo = this.corregirDato(this.jFormattedTextField_Total.getText());
            if (montodePago.compareTo(saldo) < 0) {
                this.darVuelto(montodePago);
                return true;
            } else {
                JOptionPane.showMessageDialog(
                        null,
                        "Debe de ingresar un pago inferior al saldo porfavor",
                        "Alert!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return false;
    }
    
    private boolean credSave(){
        NewJDialog_PagoApartado pago = NewJDialog_PagoApartado.getInstance();
        pago.setTittle("Detalles del crédito");
        pago.setVisible(true);
        BigDecimal montodePago = pago.getMontoDePago();
        if (montodePago != null) {
            BigDecimal saldo = this.corregirDato(this.jFormattedTextField_Total.getText());
            if (montodePago.compareTo(saldo) < 0) {
                this.darVuelto(montodePago);
                return true;

            } else {
                JOptionPane.showMessageDialog(
                        null,
                        "Debe de ingresar un pago inferior al saldo porfavor",
                        "Alert!", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return false;
    }
    
    private boolean devSave(){
        if(this.guardarDev()){
            return true;
                    }
        return false;
    }
    
    private boolean modDevSave(){
        this.devolverProductosDevolucion();
        this.modificaDevolucion();
        return this.guardarDev();
    
    }
    
    private boolean factSave(){
        return this.guardarFactura(CONCEPT_FACTURA);
    }
    private void darVuelto(BigDecimal totalFact) {
        this.jFormattedTextField_totalFact.setValue(totalFact);
        this.jFormattedTextField_vuelto.setValue(BigDecimal.ZERO);
        this.jFormattedTextField_pagoVueltoTarjeta.setText(BigDecimal.ZERO.toString());
        this.jFormattedTextField_pagoVueltoContado.setText(BigDecimal.ZERO.toString());
        this.jDialog_darVuelto.setVisible(true);
                
        
    }
    /**
     * Se encarga de llamar el jdialog para terminar de realizar la factura.
     */
    public void beforeSave() {
        if (_callType == FACTURACION_CALL){
            
            this.darVuelto(this.corregirDato(this.jFormattedTextField_Total.getText()));
            
        } 
        else if (_callType == MOD_FACT_CALL) {
           this.darVuelto(this.corregirDato(this.jFormattedTextField_Total.getText()));
        }
        
            
        else if (_callType == MOD_APART_CALL) {
            modApartSave();
               
            }
            
            
         else if (_callType == APARTADO_CALL) {
            apartSave();
                
            }
            
        
         else if (_callType == MOD_CRED_CALL) {
            modCredSave();}
                
            
            
            
        else if (_callType == CREDITO_CALL) {
            credSave();
            
        } 
        else {
            System.out.println("ERROR AL GUARDAR FACTURA. CODIGO DE LLAMADO INCORRECTO");
            
        }
        

    }
    /**
     * Se encarga de guardar las facturas de acuerdo a la accion es decir si es
     * un apartado, una factura o un credito.
     */
    public boolean guardarFacturadesdeVuelto() {
        if (jTable_Factura.getValueAt(0, 0).equals("")) {
            JOptionPane.showMessageDialog(
                    null,
                    "No se puede guardar facturas"
                    + " si no tienen ningun producto",
                    "Alert!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if (_callType == FACTURACION_CALL){
            if (factSave()) {
                return true;
            }
            return false;
            
        } 
        else if (_callType == MOD_FACT_CALL) {
            if(modFactSave()){
                return true;
            }
            return false;
        }
        
            
        else if (_callType == MOD_APART_CALL) {
            this.devolverProductos();
            this.modificaFactura();
            this.guardarFactura(CONCEPT_APARTADO);
            BigDecimal totalfact = this.corregirDato(this.jFormattedTextField_totalFact.getText());
            BigDecimal totalTarjeta = this.StringtoBigDecimal(this.jFormattedTextField_pagoVueltoTarjeta.getText());
            BigDecimal totalContado = totalfact.subtract(totalTarjeta);
            this.crearApartado(totalTarjeta, totalContado, NewJDialog_PagoApartado.getInstance().
                    getFecha());
            return true;

        } else if (_callType == APARTADO_CALL) {

            this.guardarFactura(CONCEPT_APARTADO);
            BigDecimal totalfact = this.corregirDato(this.jFormattedTextField_totalFact.getText());
            BigDecimal totalTarjeta = this.StringtoBigDecimal(this.jFormattedTextField_pagoVueltoTarjeta.getText());
            BigDecimal totalContado = totalfact.subtract(totalTarjeta);
            this.crearApartado(totalTarjeta, totalContado, NewJDialog_PagoApartado.getInstance().
                    getFecha());
            return true;
        } else if (_callType == MOD_CRED_CALL) {
            this.devolverProductos();
            this.modificaFactura();
            this.guardarFactura(CONCEPT_CREDITO);
            BigDecimal totalfact = this.corregirDato(this.jFormattedTextField_totalFact.getText());
            BigDecimal totalTarjeta = this.StringtoBigDecimal(this.jFormattedTextField_pagoVueltoTarjeta.getText());
            BigDecimal totalContado = totalfact.subtract(totalTarjeta);
            this.crearApartado(totalTarjeta, totalContado, NewJDialog_PagoApartado.getInstance().
                    getFecha());
            return true;

        } else if (_callType == CREDITO_CALL) {
            this.guardarFactura(CONCEPT_CREDITO);
            BigDecimal totalfact = this.corregirDato(this.jFormattedTextField_totalFact.getText());
            BigDecimal totalTarjeta = this.StringtoBigDecimal(this.jFormattedTextField_pagoVueltoTarjeta.getText());
            BigDecimal totalContado = totalfact.subtract(totalTarjeta);
            this.crearApartado(totalTarjeta, totalContado, NewJDialog_PagoApartado.getInstance().
                    getFecha());
            return true;
            
        }        
        else {
            System.out.println("ERROR AL GUARDAR FACTURA. CODIGO DE LLAMADO INCORRECTO");
            return false;
        }
       
       
        
        
    }    
    /**
     * Este metodo capta si haya algun cambio en el subtotal para que corriga el
     * descuento si es que se aplico uno y el total en la factua.
     *
     * @param evt
     */
    private void jFormattedTextField_SubTotalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField_SubTotalPropertyChange
        if (evt.getPropertyName().equals("value")) {
            if (evt.getNewValue() != null) {
                String text = evt.getNewValue().toString();
                DecimalFormat decimalf = (DecimalFormat) NumberFormat.getInstance();
                decimalf.setParseBigDecimal(true);
                BigDecimal subTotal = null;
                try {
                    subTotal = (BigDecimal) decimalf.parseObject(text);
                } catch (ParseException ex) {
                    Logger.getLogger(MyTableModelListener_FACT.class.getName())
                            .log(Level.SEVERE, null, ex);
                }
                this.jFormattedTextField_Total.setValue(subTotal);
                double descuentoAaplicar = Double.parseDouble(
                        this.jFormattedTextField_desc.getText());
                if (descuentoAaplicar <= 100 & descuentoAaplicar > 0) {
                    double desc = descuentoAaplicar / 100;
                    BigDecimal descuento = BigDecimal.valueOf(desc);
                    BigDecimal nuevoSubTotal;
                    BigDecimal rebaja = subTotal.multiply(descuento);
                    nuevoSubTotal = subTotal.subtract(rebaja);
                    this.jFormattedTextField_DescuentoTotal.setValue(rebaja);
                    this.jFormattedTextField_Total.setValue(nuevoSubTotal);
                } else {
                    return;

                }
            }
           
        }
    }//GEN-LAST:event_jFormattedTextField_SubTotalPropertyChange
    private void jFormattedTextField_descPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField_descPropertyChange
        if (evt.getPropertyName().equals("value")) {
            String text = this.jFormattedTextField_SubTotal.getText();
            BigDecimal subTotal = this.corregirDato(text);
            this.jFormattedTextField_Total.setValue(subTotal);
            double descuentoAaplicar = Double.parseDouble(
                    evt.getNewValue().toString());
            if (descuentoAaplicar <= 100 & descuentoAaplicar > 0) {
                double desc = descuentoAaplicar / 100;
                BigDecimal descuento = BigDecimal.valueOf(desc);
                BigDecimal nuevoSubTotal;
                BigDecimal rebaja = subTotal.multiply(descuento);
                nuevoSubTotal = subTotal.subtract(rebaja);
                this.jFormattedTextField_DescuentoTotal.setValue(rebaja);
                this.jFormattedTextField_Total.setValue(nuevoSubTotal);
            } else if (descuentoAaplicar == 0.0) {
                this.jFormattedTextField_DescuentoTotal.
                        setValue(descuentoAaplicar);
            } else {
                this.jFormattedTextField_desc.setValue(0.00);
                JOptionPane.showMessageDialog(
                        null,
                        "No se puede aplicar un descuento de "
                        + descuentoAaplicar,
                        "Alert!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jFormattedTextField_descPropertyChange

    private void jFormattedTextField_descKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_descKeyPressed
        if (evt.getKeyCode() == 10) {
            this.setFocusTablaFact(0);

        }
        if (evt.isControlDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_jFormattedTextField_descKeyPressed

    private void jFormattedTextField_descKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_descKeyTyped
        int tecla = evt.getKeyChar();
        if (tecla == KeyEvent.VK_COMMA) {
            evt.consume();
        }
        if (tecla == KeyEvent.VK_PERIOD) {
            return;
        };
        if (!Character.isDigit(tecla) & !Character.isISOControl(
                evt.getKeyChar())) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }

    }//GEN-LAST:event_jFormattedTextField_descKeyTyped

    private void jButton_CancelarCrearProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_CancelarCrearProductoKeyPressed
        if (evt.getKeyCode() == 10) {
            this.jButton_CancelarCrearProducto.doClick();
        }
    }//GEN-LAST:event_jButton_CancelarCrearProductoKeyPressed
    /**
     * Este metodo permite actualizar la rebaja del descuento y el total cuando
     * se crear un descuento unitario
     *
     * @param evt
     */
    private void jFormattedTextField_PrecioRegularPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField_PrecioRegularPropertyChange
        if (evt.getPropertyName().equals("value")) {
            String text = evt.getNewValue().toString();
            DecimalFormat decimalf = (DecimalFormat) NumberFormat.getInstance();
            decimalf.setParseBigDecimal(true);
            BigDecimal PrecioRegular = null;
            try {
                PrecioRegular = (BigDecimal) decimalf.parseObject(text);
            } catch (ParseException ex) {
                Logger.getLogger(
                        MyTableModelListener_FACT.class.
                        getName()).log(Level.SEVERE, null, ex);
            }
            this.jFormattedTextField_PrecioConDesc.setValue(PrecioRegular);
            double descuentoAaplicar = Double.parseDouble(
                    this.jFormattedTextField_descUnitario.getText());
            if (descuentoAaplicar <= 100 & descuentoAaplicar > 0) {
                double desc = descuentoAaplicar / 100;
                BigDecimal descuento = BigDecimal.valueOf(desc);
                BigDecimal PrecioNuevo;
                BigDecimal rebaja = PrecioRegular.multiply(descuento);
                PrecioNuevo = PrecioRegular.subtract(rebaja);
                this.jFormattedTextField_RebajaDelDesc.setValue(rebaja);
                this.jFormattedTextField_PrecioConDesc.setValue(PrecioNuevo);
            } else {
                return;

            }

        }

    }//GEN-LAST:event_jFormattedTextField_PrecioRegularPropertyChange
    /**
     * *
     * Este metodo permite actualizar el valor del precio con descuento y la
     * rebaja que se le hace a un producto cuando se le aplica un descuento
     * unitario
     *
     * @param evt
     */
    private void jFormattedTextField_descUnitarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField_descUnitarioPropertyChange
        if (evt.getPropertyName().equals("value")) {
            String text = this.jFormattedTextField_PrecioRegular.getText();
            BigDecimal PrecioSinDesc = this.corregirDato(text);
            this.jFormattedTextField_PrecioConDesc.setValue(PrecioSinDesc);
            double descuentoAaplicar = Double.parseDouble(
                    evt.getNewValue().toString());
            if (descuentoAaplicar <= 100 & descuentoAaplicar > 0) {
                double desc = descuentoAaplicar / 100;
                BigDecimal descuento = BigDecimal.valueOf(desc);
                BigDecimal PrecioNuevo;
                BigDecimal rebaja = PrecioSinDesc.multiply(descuento);
                PrecioNuevo = PrecioSinDesc.subtract(rebaja);
                this.jFormattedTextField_RebajaDelDesc.setValue(rebaja);
                this.jFormattedTextField_PrecioConDesc.setValue(PrecioNuevo);
            } else if (descuentoAaplicar == 0.0) {
                this.jFormattedTextField_RebajaDelDesc.setValue(
                        descuentoAaplicar);
            } else {
                this.jFormattedTextField_descUnitario.setValue(0.00);
                JOptionPane.showMessageDialog(
                        null,
                        "No se puede aplicar un descuento de "
                        + descuentoAaplicar,
                        "Alert!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jFormattedTextField_descUnitarioPropertyChange

    private void jFormattedTextField_descUnitarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_descUnitarioKeyPressed
        if (evt.getKeyCode() == 10) {
            this.jButton_IngresarDescuento.requestFocusInWindow();
        }
        if (evt.isControlDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_jFormattedTextField_descUnitarioKeyPressed
    private void jFormattedTextField_descUnitarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_descUnitarioKeyTyped
        int tecla = evt.getKeyChar();
        if (tecla == KeyEvent.VK_COMMA) {
            evt.consume();
        }
        if (tecla == KeyEvent.VK_PERIOD) {
            return;
        };
        if (!Character.isDigit(tecla) & !Character.isISOControl(evt.getKeyChar())) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_jFormattedTextField_descUnitarioKeyTyped
    private void clearDescuentoUnitario() {
        
        this.jFormattedTextField_descUnitario.setValue(BigDecimal.ZERO);
        this.jFormattedTextField_RebajaDelDesc.setValue(BigDecimal.ZERO);
        this.jFormattedTextField_PrecioConDesc.setValue(BigDecimal.ZERO);
    }
    private void jButton_IngresarDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_IngresarDescuentoActionPerformed
       
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        int row = jTable_Factura.getSelectedRow();
        model.setValueAt(this.jFormattedTextField_PrecioConDesc.getValue(), row, 3);
        this.setFocusTablaFact(1);
        this.clearDescuentoUnitario();
        this.jDialog_DescuentoUnitario.dispose();

    }//GEN-LAST:event_jButton_IngresarDescuentoActionPerformed
    private void jButton_CancelarDescuentoUnitarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelarDescuentoUnitarioActionPerformed
        this.clearDescuentoUnitario();
        int row = jTable_Factura.getSelectedRow();
        this.setFocusTablaFact(1);
        this.jDialog_DescuentoUnitario.dispose();
    }//GEN-LAST:event_jButton_CancelarDescuentoUnitarioActionPerformed

    private void jFormattedTextField_descUnitarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextField_descUnitarioMouseClicked
        this.jFormattedTextField_descUnitario.selectAll();
    }//GEN-LAST:event_jFormattedTextField_descUnitarioMouseClicked

    private void jFormattedTextField_descMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextField_descMouseClicked
        this.jFormattedTextField_desc.selectAll();
    }//GEN-LAST:event_jFormattedTextField_descMouseClicked
    /**
     * Este metodo detecta si el usuario ingresa un cliente y verifica si este
     * existe o no para poder mostrarle la interfaz de crear un cliente.
     *
     * @param evt
     */
    private void jFormattedTextField_ClientePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField_ClientePropertyChange
        if (evt.getPropertyName().equals("value")) {
            String cliente = this.jFormattedTextField_Cliente.getText();
            Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
            boolean existeCliente = AdminBD.verSiExisteCliente(cliente);
            if (existeCliente) {
                return;

            } else {
                this.jFormattedTextField_nombreCliente.setText(cliente);
                this.jDialog_CrearCliente.setVisible(true);

            }

        }
    }//GEN-LAST:event_jFormattedTextField_ClientePropertyChange

    private void jFormattedTextField_ClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_ClienteKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            this.setFocusTablaFact(0);
        } else {
            hotKeyPressEvt(evt);
        }        
    }//GEN-LAST:event_jFormattedTextField_ClienteKeyPressed

    private void jButton_CancelarCrearClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelarCrearClienteActionPerformed
        this.jFormattedTextField_Cliente.setValue("Cliente Anonimo");
        this.jDialog_CrearCliente.dispose();
        this.setFocusTablaFact(0);
    }//GEN-LAST:event_jButton_CancelarCrearClienteActionPerformed

    private void jFormattedTextField_ClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextField_ClienteMouseClicked
        this.jFormattedTextField_Cliente.selectAll();
    }//GEN-LAST:event_jFormattedTextField_ClienteMouseClicked

    private void jButton_CrearClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CrearClienteActionPerformed
        this.crearCliente();
    }//GEN-LAST:event_jButton_CrearClienteActionPerformed

    private void jButton_CrearClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_CrearClienteKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            this.crearCliente();
        }

    }//GEN-LAST:event_jButton_CrearClienteKeyPressed

    private void trashBttMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trashBttMouseClicked
        this.eliminarFila();
    }//GEN-LAST:event_trashBttMouseClicked

    private void watchBttMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watchBttMouseClicked
        if (jTable_Factura.isEditing()) {
            jTable_Factura.getCellEditor().cancelCellEditing();

        }
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        int row = jTable_Factura.getSelectedRow();
        String idProducto = model.getValueAt(row, 0).toString();//obtiene el id
        //del producto seleccionado para VerProducto
        if (!"".equals(idProducto)) {//verifica que se quiere ver un producto
            this.verProducto(idProducto);
        } // Si no selecciono un producto entonces que busque el producto por cod
        else {
            jDialog_BuscarProductoPorCod.setVisible(true);
        }
    }//GEN-LAST:event_watchBttMouseClicked

    private void addBttMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBttMouseClicked
        this.creacionProductoPanel();
    }//GEN-LAST:event_addBttMouseClicked

    private void discBttMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discBttMouseClicked
        if (jTable_Factura.isEditing()) {
            jTable_Factura.getCellEditor().cancelCellEditing();

        }
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        int row = jTable_Factura.getSelectedRow();
        String idProducto = model.getValueAt(row, 0).toString();
        //obtiene el id del
        //producto seleccionado para VerProducto
       
        if (!"".equals(idProducto)) {//verifica que se quiere ver un producto
            Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
            BigDecimal precio =AdminBD.verPrecio(idProducto);
            this.aplicarDescAlProducto(idProducto,precio);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Porfavor seleccione un producto",
                    "Alert!", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_discBttMouseClicked

    private void searchBttMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBttMouseClicked
        if (jTable_Factura.isEditing()) {
            jTable_Factura.getCellEditor().cancelCellEditing();

        }
        NewJDialog_Buscador buscador = new NewJDialog_Buscador();
        buscador.actualizaTablaParaInventario();
        String id = buscador.getIdProducto();
        if(id==null){
            return;
        }
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        int row = this.jTable_Factura.getSelectedRow();
        model.setValueAt(id, row, 0);
        model.addRow(1);
        this.setFocusTablaFact(1);
    }//GEN-LAST:event_searchBttMouseClicked

    private void saveBttMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBttMouseClicked
        justSavePrincipalCall();
    }//GEN-LAST:event_saveBttMouseClicked

    private void printBttMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printBttMouseClicked
         printPrincipalCall();
    
    }//GEN-LAST:event_printBttMouseClicked

    private void addBttMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBttMouseEntered
        addBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/addBttOvr.png")));
    }//GEN-LAST:event_addBttMouseEntered

    private void addBttMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBttMouseExited
        addBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/addBtt.png")));
    }//GEN-LAST:event_addBttMouseExited

    private void watchBttMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watchBttMouseEntered
        watchBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/watchBttOvr.png")));
    }//GEN-LAST:event_watchBttMouseEntered

    private void watchBttMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watchBttMouseExited
        watchBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/watchBtt.png")));
    }//GEN-LAST:event_watchBttMouseExited

    private void trashBttMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trashBttMouseEntered
        trashBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/trashBttOvr.png")));
    }//GEN-LAST:event_trashBttMouseEntered

    private void trashBttMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trashBttMouseExited
        trashBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/trashBtt.png")));
    }//GEN-LAST:event_trashBttMouseExited

    private void discBttMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discBttMouseEntered
        discBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/discBttOvr.png")));
    }//GEN-LAST:event_discBttMouseEntered

    private void discBttMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discBttMouseExited
        discBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/discBtt.png")));
    }//GEN-LAST:event_discBttMouseExited

    private void searchBttMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBttMouseEntered
        searchBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/searchBttOvr.png")));
    }//GEN-LAST:event_searchBttMouseEntered

    private void searchBttMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBttMouseExited
        searchBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/searchBtt.png")));
    }//GEN-LAST:event_searchBttMouseExited

    private void saveBttMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBttMouseEntered
        saveBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/saveBttOvr.png")));
    }//GEN-LAST:event_saveBttMouseEntered

    private void saveBttMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBttMouseExited
        saveBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/saveBtt.png")));
    }//GEN-LAST:event_saveBttMouseExited

    private void printBttMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printBttMouseEntered
        printBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/printBttOvr.png")));
    }//GEN-LAST:event_printBttMouseEntered

    private void printBttMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printBttMouseExited
        printBtt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/System/Images/Buttons/printBtt.png")));
    }//GEN-LAST:event_printBttMouseExited

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
        NewJDialog_Buscador buscador = new NewJDialog_Buscador();
        buscador.actualizaTablaParaClientes();
        String cliente = buscador.getCliente();
        this.jFormattedTextField_Cliente.setText(cliente);
        this.setFocusTablaFact(0);
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jTextField_codigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_codigoKeyTyped
        int limite = 30;
        if (jTextField_codigo.getText().length() >= limite) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();

        }
        if (Character.isLowerCase(evt.getKeyChar())) {
            evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        }
        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jTextField_codigo.transferFocus();

        }
    }//GEN-LAST:event_jTextField_codigoKeyTyped

    private void jTextField_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_nombreKeyTyped
        int limite = 30;
        if (jTextField_nombre.getText().length() >= limite) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();

        }
        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jTextField_nombre.transferFocus();

        }
    }//GEN-LAST:event_jTextField_nombreKeyTyped

    private void jButton_IngresarDescuentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_IngresarDescuentoKeyPressed
        if(evt.getKeyChar()==KeyEvent.VK_ENTER){
            this.jButton_IngresarDescuento.doClick();
        
        }
    }//GEN-LAST:event_jButton_IngresarDescuentoKeyPressed

    private void jFormattedTextField_nombreClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_nombreClienteKeyTyped
        int limite = 30;
        if (jFormattedTextField_nombreCliente.getText().length() >= limite) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();

        }
        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jFormattedTextField_nombreCliente.transferFocus();

        }
    }//GEN-LAST:event_jFormattedTextField_nombreClienteKeyTyped

    private void jFormattedTextField_direccionClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_direccionClienteKeyTyped
        int limite = 60;
        if (jFormattedTextField_direccionCliente.getText().length() >= limite) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();

        }
        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jFormattedTextField_direccionCliente.transferFocus();

        }
    }//GEN-LAST:event_jFormattedTextField_direccionClienteKeyTyped

    private void jFormattedTextField_telefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_telefonoKeyTyped
        int limite = 30;
        if (jFormattedTextField_telefono.getText().length() >= limite) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();

        }
        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jFormattedTextField_telefono.transferFocus();
        }
    }//GEN-LAST:event_jFormattedTextField_telefonoKeyTyped

    private void jFormattedTextField_fechaCumpleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_fechaCumpleKeyTyped
        int limite = 30;
        if (jFormattedTextField_fechaCumple.getText().length() >= limite) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();

        }
        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jFormattedTextField_fechaCumple.transferFocus();

        }
    }//GEN-LAST:event_jFormattedTextField_fechaCumpleKeyTyped

    private void jFormattedTextField_pagoVueltoContadoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoContadoPropertyChange
        if (evt.getPropertyName().equals("value")) {

            if (evt.getNewValue() != null) {
                String text = evt.getNewValue().toString();
                BigDecimal pagoContado = this.StringtoBigDecimal(text);
                BigDecimal pagoTarjeta = this.StringtoBigDecimal(this.jFormattedTextField_pagoVueltoTarjeta.getText());
                BigDecimal total = this.corregirDato(this.jFormattedTextField_totalFact.getText());
                if (pagoContado.compareTo(BigDecimal.ZERO) == 0 & pagoTarjeta.compareTo(BigDecimal.ZERO) == 0) {
                    this.jFormattedTextField_vuelto.setValue(BigDecimal.ZERO);
                    return;
                }
                this.jFormattedTextField_vuelto.setValue((pagoTarjeta.add(pagoContado)).subtract(total));

            }
            
        }
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoContadoPropertyChange

    private void jFormattedTextField_pagoVueltoContadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoContadoKeyTyped
        int tecla = evt.getKeyChar();
        if (tecla == KeyEvent.VK_COMMA) {
            return;
        }
        if (tecla == KeyEvent.VK_PERIOD) {
            return;
        }
        if (!Character.isDigit(tecla) & !Character.isISOControl(evt.getKeyChar())) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();

        }

        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jButton_aceptarVuelto.requestFocusInWindow();

        }
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoContadoKeyTyped

    private void jButton_aceptarVueltoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_aceptarVueltoKeyPressed
        if(evt.getKeyChar()== KeyEvent.VK_ENTER){
            this.jButton_aceptarVuelto.doClick();
        
        }
    }//GEN-LAST:event_jButton_aceptarVueltoKeyPressed

    private void jButton_aceptarVueltoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_aceptarVueltoActionPerformed
        if(new BigDecimal(this.jFormattedTextField_vuelto.getValue().toString()).compareTo(BigDecimal.ZERO)<0){
              JOptionPane.showMessageDialog(
                    null,
                    "Por favor ingrese el pago del cliente correctamente",
                    "Error vuelto negativo", JOptionPane.ERROR_MESSAGE);
              return;
        }
        this.jDialog_darVuelto.dispose();
        if (!_justSave) {
            if (this.guardarFacturadesdeVuelto()) {
                XMLConfiguracion xml = ManejoDeArchivos.XMLConfiguracion.getInstance();
                if (_callType == FACTURACION_CALL | _callType == MOD_FACT_CALL) {
                    this.imprimirFactura(this.jLabel_NumerodeFact.getText(),
                            this.jLabel_Fecha.getText(),
                            this.jFormattedTextField_Total.getText(),
                            this.jFormattedTextField_SubTotal.getText(),
                            this.jFormattedTextField_desc.getText(),
                            this.jFormattedTextField_DescuentoTotal.getText(),
                            this.jFormattedTextField_Cliente.getText(),
                            JF_Facturacion.getInstance().getSellerName());
                }
                if (_callType == APARTADO_CALL | _callType == MOD_APART_CALL | _callType == CREDITO_CALL | _callType == MOD_CRED_CALL) {
                    this.imprimirApartadoCredito(this.jLabel_NumerodeFact.getText(),
                            this.jLabel_Fecha.getText(),
                            this.jFormattedTextField_Total.getText(),
                            this.jFormattedTextField_SubTotal.getText(),
                            this.jFormattedTextField_desc.getText(),
                            this.jFormattedTextField_DescuentoTotal.getText(),
                            this.jFormattedTextField_Cliente.getText(),
                            JF_Facturacion.getInstance().getSellerName());
                }
            }
        } else {
            this.guardarFacturadesdeVuelto();
        }
        this.regresar();
    }//GEN-LAST:event_jButton_aceptarVueltoActionPerformed

    private void jFormattedTextField_pagoVueltoContadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoContadoMouseClicked
         this.jFormattedTextField_pagoVueltoContado.selectAll();
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoContadoMouseClicked

    private void jFormattedTextField_pagoVueltoContadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoContadoKeyPressed
         if (evt.isControlDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoContadoKeyPressed

    private void jFormattedTextField_pagoVueltoTarjetaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoTarjetaMouseClicked
        this.jFormattedTextField_pagoVueltoTarjeta.selectAll();
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoTarjetaMouseClicked

    private void jFormattedTextField_pagoVueltoTarjetaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoTarjetaPropertyChange
        if (evt.getPropertyName().equals("value")) {

            if (evt.getNewValue() != null) {
                String text = evt.getNewValue().toString();
                BigDecimal pagotarjeta = this.StringtoBigDecimal(text);
                BigDecimal pagocontado = this.StringtoBigDecimal(this.jFormattedTextField_pagoVueltoContado.getText());
                BigDecimal total = this.corregirDato(this.jFormattedTextField_totalFact.getText());
                if (pagotarjeta.compareTo(BigDecimal.ZERO) == 0 & pagocontado.compareTo(BigDecimal.ZERO) == 0) {
                    this.jFormattedTextField_vuelto.setValue(BigDecimal.ZERO);
                    return;
                }
                if(pagotarjeta.compareTo(total)>0){
                      JOptionPane.showMessageDialog(
                    null,
                    "El pago con tarjeta no puede superar el monto facturado",
                    "Alert!", JOptionPane.ERROR_MESSAGE);
                      this.jFormattedTextField_pagoVueltoTarjeta.setValue(BigDecimal.ZERO);
                      this.jFormattedTextField_pagoVueltoTarjeta.requestFocusInWindow();
                      if(pagocontado.compareTo(BigDecimal.ZERO)==0){
                          this.jFormattedTextField_vuelto.setValue(BigDecimal.ZERO);
                      }
                }
                else{
                this.jFormattedTextField_vuelto.setValue((pagotarjeta.add(pagocontado)).subtract(total));}


            }

        }
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoTarjetaPropertyChange

    private void jFormattedTextField_pagoVueltoTarjetaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoTarjetaKeyPressed
         if (evt.isControlDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoTarjetaKeyPressed

    private void jFormattedTextField_pagoVueltoTarjetaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField_pagoVueltoTarjetaKeyTyped
        int tecla = evt.getKeyChar();
        if (tecla == KeyEvent.VK_COMMA) {
            return;
        }
        if (tecla == KeyEvent.VK_PERIOD) {
            return;
        }
        if (!Character.isDigit(tecla) & !Character.isISOControl(evt.getKeyChar())) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();

        }

        if (KeyEvent.VK_ENTER == evt.getKeyChar()) {
            this.jButton_aceptarVuelto.requestFocusInWindow();

        }
    }//GEN-LAST:event_jFormattedTextField_pagoVueltoTarjetaKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.jDialog_darVuelto.dispose();
        this.jFormattedTextField_pagoVueltoContado.setText(BigDecimal.ZERO.toString());
        this.jFormattedTextField_pagoVueltoTarjeta.setText(BigDecimal.ZERO.toString());
        this.jFormattedTextField_vuelto.setValue(BigDecimal.ZERO);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void passSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passSellerActionPerformed
        
    }//GEN-LAST:event_passSellerActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        
    }//GEN-LAST:event_formPropertyChange

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        hotKeyPressEvt(evt);
    }//GEN-LAST:event_formKeyPressed

    private void jLayeredPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLayeredPane1KeyPressed
        hotKeyPressEvt(evt);
    }//GEN-LAST:event_jLayeredPane1KeyPressed

    private void jTextField_DetalleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_DetalleKeyPressed
        hotKeyPressEvt(evt);
    }//GEN-LAST:event_jTextField_DetalleKeyPressed

    private void backgroundComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_backgroundComponentHidden
        
    }//GEN-LAST:event_backgroundComponentHidden
    /**
     * Este metodo devuelve toda la informacion de la tabla de crear factura
     *
     * @return
     */
    private String[][] obtenerInfoTablaFact() {
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        int filas = model.getRowCount();
        String[][] infoTablaFactura = new String[filas][5];
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < 5; j++) {
                if (model.getValueAt(i, j) != null) {
                    String om = model.getValueAt(i, j).toString();
                    if (om.trim().length() != 0) {
                        infoTablaFactura[i][j] = om;
                    }
                }
            }
        }
        return infoTablaFactura;
    }
    
    private void hotKeyPressEvt(java.awt.event.KeyEvent evt){
        if (evt.getKeyCode() == evt.VK_F4){
            printPrincipalCall();
        } else if (evt.getKeyCode() == evt.VK_F2){
            justSavePrincipalCall();
        }
    }

    private void printPrincipalCall(){
        if (!_savePress){
            _savePress = true;
            _justSave = false;
            if (_callType == DEVOLUCION_CALL) {
                devSave();
                XMLConfiguracion xml = new XMLConfiguracion(); 
                this.imprimirDevolucion(this.jLabel_NumerodeFact.getText(),
                            this.jLabel_Fecha.getText(),
                            this.jFormattedTextField_Total.getText(),
                            this.jFormattedTextField_SubTotal.getText(),
                            this.jFormattedTextField_desc.getText(),
                            this.jFormattedTextField_DescuentoTotal.getText(),
                            this.jFormattedTextField_Cliente.getText(),
                            ManejoDeArchivos.XMLConfiguracion.getInstance().ObtenerUsuario());
                
                this.regresar();
                return;
            }
            if (_callType == MOD_DEV_CALL) {
                modDevSave();
                XMLConfiguracion xml = new XMLConfiguracion(); 
                this.imprimirDevolucion(this.jLabel_NumerodeFact.getText(),
                            this.jLabel_Fecha.getText(),
                            this.jFormattedTextField_Total.getText(),
                            this.jFormattedTextField_SubTotal.getText(),
                            this.jFormattedTextField_desc.getText(),
                            this.jFormattedTextField_DescuentoTotal.getText(),
                            this.jFormattedTextField_Cliente.getText(),
                            ManejoDeArchivos.XMLConfiguracion.getInstance().ObtenerUsuario());
                this.regresar();
                return;
            }
            else{
            this.beforeSave();}
        }
        _savePress = false;
    }
    
    private void justSavePrincipalCall(){
        if (!_savePress){
            _justSave = true;
            _savePress = true;
            if (_callType == DEVOLUCION_CALL) {
                devSave();
                this.regresar();
                return;
            }
            if (_callType == MOD_DEV_CALL) {
                modDevSave();
                this.regresar();
                return;
            }
            else{
            this.beforeSave();}
        }
        _savePress = false;
    }
    
    
    
    /**
     * Este metodo carga la informacion de la factura que se desea ver, esta
     * informacion es: cliente,vendedor,totalfact,descuento,fecha,detalle, tipo
     * de pago etc.
     */
    public void cargarInfoFact() {
      
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        if (_callType == MOD_APART_CALL | _callType == APARTADO_CALL | _callType == MOD_CRED_CALL | _callType == CREDITO_CALL) {
            AdminBD.verInfoApartadoCredito(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
        }
        else{    
        AdminBD.verInfoFactura(Integer.parseInt(this.jLabel_NumerodeFact.getText()));}
        Object[][] dataInfoFactura = AdminBD.getData();
        Object[] datosInfoFactura = dataInfoFactura[0];
        String fecha = datosInfoFactura[0].toString();
        String cliente = datosInfoFactura[1].toString();
        String totalFact = datosInfoFactura[3].toString();
        String detalle = datosInfoFactura[4].toString();
        String descuento = datosInfoFactura[5].toString();
        this.jFormattedTextField_Cliente.setText(cliente);
        this.jLabel_Fecha.setText(fecha);
        this.jTextField_Detalle.setText(detalle);
        BigDecimal totalFacturado = this.StringtoBigDecimal(totalFact);
        BigDecimal descuentoD = this.StringtoBigDecimal(descuento);
        BigDecimal subtotal = totalFacturado.divide(new BigDecimal("1.00").subtract(descuentoD.divide(new BigDecimal("100.00"))));
        this.jFormattedTextField_DescuentoTotal.setValue(totalFacturado.subtract(subtotal));
        this.jFormattedTextField_SubTotal.setValue(subtotal);
        this.jFormattedTextField_Total.setValue(totalFacturado);
        this.jFormattedTextField_desc.setValue(descuentoD);

    }

    /**
     * Este metodo permite personalizar la tabla de crear Factura
     */
    public void personalizarTablaFactura() {
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Date date = new Date();
        this.jLabel_Fecha.setText(dateFormat.format(date));
        String[] columnNames = {"Cod. Articulo", "Articulo",
            "Cantidad", "Precio.Unit",
            "Sub-Total"};
        List<Object[]> data = new ArrayList<Object[]>();
        //Agrega el modelo a la factura
        MyTableModel_FACT model = new MyTableModel_FACT(columnNames, data);
        
        this.jTable_Factura.setModel(model);
        //Agrega 1 filas
        model.addRow(1);
          
        
        
        this.jFormattedTextField_SubTotal.setValue(BigDecimal.ZERO);
        this.jFormattedTextField_Total.setValue(BigDecimal.ZERO);
        this.jFormattedTextField_DescuentoTotal.setValue(BigDecimal.ZERO);

    }

    /**
     * De vuelve un String[] con toda la informacion de una fila de una tabla
     *
     * @param data //Viene de un consulta UNICAMENTE de una fila
     * @return
     */
    private String[] obtenerFila(Object[][] data) {
        //System.out.println("ESTO ES LO QUE QUIERO");
        int numFilas = data.length;
        String[] string = new String[numFilas];
        int numColumnas = data[0].length;
        for (int row = 0; row < numFilas; row++) {
            for (int column = 0; column < numColumnas; column++) {
                string[row] = data[row][column].toString();

            }

        }
        return string;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel addBtt;
    javax.swing.JLabel background;
    javax.swing.JLabel discBtt;
    javax.swing.JButton jButton1;
    javax.swing.JButton jButton2;
    javax.swing.JButton jButton_BusqueProducto;
    javax.swing.JButton jButton_CancelaBusquedaProducto;
    javax.swing.JButton jButton_CancelarCrearCliente;
    javax.swing.JButton jButton_CancelarCrearProducto;
    javax.swing.JButton jButton_CancelarDescuentoUnitario;
    javax.swing.JButton jButton_CrearCliente;
    javax.swing.JButton jButton_CrearProducto;
    javax.swing.JButton jButton_IngresarDescuento;
    javax.swing.JButton jButton_aceptarVuelto;
    javax.swing.JDialog jDialog_BuscarProductoPorCod;
    javax.swing.JDialog jDialog_CrearCliente;
    javax.swing.JDialog jDialog_CrearProducto;
    javax.swing.JDialog jDialog_DescuentoUnitario;
    javax.swing.JDialog jDialog_VerProducto;
    javax.swing.JDialog jDialog_darVuelto;
    javax.swing.JFormattedTextField jFormattedTextField_Cliente;
    javax.swing.JFormattedTextField jFormattedTextField_DescuentoTotal;
    javax.swing.JFormattedTextField jFormattedTextField_PrecioConDesc;
    javax.swing.JFormattedTextField jFormattedTextField_PrecioRegular;
    javax.swing.JFormattedTextField jFormattedTextField_RebajaDelDesc;
    javax.swing.JFormattedTextField jFormattedTextField_SubTotal;
    javax.swing.JFormattedTextField jFormattedTextField_Total;
    javax.swing.JFormattedTextField jFormattedTextField_cantidadProducto;
    javax.swing.JFormattedTextField jFormattedTextField_desc;
    javax.swing.JFormattedTextField jFormattedTextField_descUnitario;
    javax.swing.JFormattedTextField jFormattedTextField_direccionCliente;
    javax.swing.JFormattedTextField jFormattedTextField_fechaCumple;
    javax.swing.JFormattedTextField jFormattedTextField_nombreCliente;
    javax.swing.JFormattedTextField jFormattedTextField_pagoVueltoContado;
    javax.swing.JFormattedTextField jFormattedTextField_pagoVueltoTarjeta;
    javax.swing.JFormattedTextField jFormattedTextField_precioProducto;
    javax.swing.JFormattedTextField jFormattedTextField_telefono;
    javax.swing.JFormattedTextField jFormattedTextField_totalFact;
    javax.swing.JFormattedTextField jFormattedTextField_vuelto;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel11;
    javax.swing.JLabel jLabel12;
    javax.swing.JLabel jLabel13;
    javax.swing.JLabel jLabel14;
    javax.swing.JLabel jLabel15;
    javax.swing.JLabel jLabel16;
    javax.swing.JLabel jLabel17;
    javax.swing.JLabel jLabel18;
    javax.swing.JLabel jLabel19;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel20;
    javax.swing.JLabel jLabel22;
    javax.swing.JLabel jLabel23;
    javax.swing.JLabel jLabel24;
    javax.swing.JLabel jLabel25;
    javax.swing.JLabel jLabel27;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JLabel jLabel7;
    javax.swing.JLabel jLabel8;
    javax.swing.JLabel jLabel9;
    javax.swing.JLabel jLabel_Cantidad;
    javax.swing.JLabel jLabel_CodNoEncontrado;
    javax.swing.JLabel jLabel_Descripcion;
    javax.swing.JLabel jLabel_DescripcionDescUnitario;
    javax.swing.JLabel jLabel_Fecha;
    javax.swing.JLabel jLabel_FechaCumpleanos;
    javax.swing.JLabel jLabel_Nombre;
    javax.swing.JLabel jLabel_NumerodeFact;
    javax.swing.JLabel jLabel_PrecioUnitario;
    javax.swing.JLabel jLabel_datoCant;
    javax.swing.JLabel jLabel_datoDescrip;
    javax.swing.JLabel jLabel_datoNomb;
    javax.swing.JLabel jLabel_datoPrecio;
    javax.swing.JLabel jLabel_direccionCliente;
    javax.swing.JLabel jLabel_nombreCliente;
    javax.swing.JLabel jLabel_telefonoCliente;
    javax.swing.JLayeredPane jLayeredPane1;
    javax.swing.JLayeredPane jLayeredPane_VerProducto;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JPanel jPanel3;
    javax.swing.JPanel jPanel4;
    javax.swing.JPanel jPanel5;
    javax.swing.JScrollPane jScrollPane2;
    javax.swing.JSeparator jSeparator3;
    javax.swing.JTable jTable_Factura;
    javax.swing.JTextField jTextField_Detalle;
    javax.swing.JTextField jTextField_busqueProducto;
    javax.swing.JTextField jTextField_codigo;
    javax.swing.JTextField jTextField_nombre;
    javax.swing.JLabel lbPagoTitle;
    javax.swing.JLabel lblTittle;
    javax.swing.JLabel printBtt;
    javax.swing.JLabel saveBtt;
    javax.swing.JLabel searchBtt;
    javax.swing.JLabel trashBtt;
    javax.swing.JLabel watchBtt;
    // End of variables declaration//GEN-END:variables
    /**
     * Este metodo permite crear una factura y guardala en la base de datos
     */
    private void crearFactura(String concepto) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        String Cliente = this.jFormattedTextField_Cliente.getText();
        int idCliente = AdminBD.veridCliente(Cliente);
        int idFactura = Integer.parseInt(this.jLabel_NumerodeFact.getText());
        
//        String seller = JF_Facturacion.getInstance().getSellerName();
        String seller = "admin";
        
        int idVendedor = AdminBD.veridVendedor(seller);
        String detalle = this.jTextField_Detalle.getText();
        String DescuentoSinCorregir =this.jFormattedTextField_desc.getText();
        BigDecimal descuento = this.StringtoBigDecimal(DescuentoSinCorregir);
        BigDecimal totalfact= this.corregirDato(this.jFormattedTextField_totalFact.getText());
        BigDecimal totalTarjeta= this.StringtoBigDecimal(this.jFormattedTextField_pagoVueltoTarjeta.getText());
        BigDecimal totalContado= totalfact.subtract(totalTarjeta);
        //System.out.println(idFactura+" "+descuento+" "+tipoPago+" "+idCliente+" "+idVendedor+" "+detalle+" "+totalFact+" ");
        
        if (_callType == MOD_APART_CALL | _callType == APARTADO_CALL |_callType == MOD_CRED_CALL |_callType == CREDITO_CALL) {
            AdminBD.crearFactura(idFactura, descuento, idCliente, idVendedor,
                concepto, detalle,BigDecimal.ZERO,BigDecimal.ZERO,"A");
        }
        else{
            AdminBD.crearFactura(idFactura, descuento, idCliente, idVendedor,
                concepto, detalle,totalTarjeta,totalContado,"A");}
    }

    private void aplicarDescAlProducto(String idProducto, BigDecimal precio) {
        this.jDialog_DescuentoUnitario.setVisible(true);
        this.jFormattedTextField_PrecioConDesc.setValue(precio);
        this.jLabel_DescripcionDescUnitario.setText(idProducto);
        this.jFormattedTextField_PrecioRegular.setValue(precio);
        this.jFormattedTextField_descUnitario.requestFocusInWindow();
        this.jFormattedTextField_descUnitario.selectAll();

    }

    /**
     * Este metodo permite corregir el dato que tiene el signo de C y ademas que
     * puede tener comas ya que el tipo Decimal en la base solo puede tener
     * puntos y no comas.
     *
     * @param Dato
     * @return
     */
    private BigDecimal corregirDato(String Dato) {
        String datoAcorregir = Dato.replace("C", "");
        DecimalFormat decimalformat = (DecimalFormat) NumberFormat.getInstance();
        decimalformat.setParseBigDecimal(true);
        BigDecimal DatoCorregido = null;
        try {
            DatoCorregido = (BigDecimal) decimalformat.parseObject(datoAcorregir);
        } catch (ParseException ex) {
            Logger.getLogger(MyTableModelListener_FACT.class.getName()).log(Level.SEVERE, null, ex);
        }
        return DatoCorregido;

    }

    private void crearCliente() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        String nombre = this.jFormattedTextField_nombreCliente.getText();
        if(nombre.equals("")){
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor ingrese el nombre del cliente",
                    "Alert!", JOptionPane.ERROR_MESSAGE);
             this.jFormattedTextField_nombreCliente.requestFocusInWindow();
             return;
        }
        String direccion = this.jFormattedTextField_direccionCliente.getText();
        String telefono = this.jFormattedTextField_telefono.getText();
        String fechaCumpleanos = this.jFormattedTextField_fechaCumple.getText();
        if (fechaCumpleanos.equals("")) {
            fechaCumpleanos = null;
        }
        AdminBD.insertarCliente(nombre, direccion, telefono, fechaCumpleanos);
        this.jFormattedTextField_Cliente.setValue(nombre);
        this.jDialog_CrearCliente.dispose();
    }

    private boolean guardarFactura(String concepto) {
        if (jTable_Factura.isEditing()) {
            jTable_Factura.getCellEditor().cancelCellEditing();

        }
        this.crearFactura(concepto);
        this.guardarProductosFactura();
        return true;
    }

    /**
     * Imprime la factura.
     *
     * @param numFact //Debe ser Generico.
     * @param date
     * @param totalFact
     * @return
     */
    private boolean imprimirFactura(String numFact, String date, String totalFact, String subtotalFact, String desc, String rebaja, String cliente,
            String vendedor) {
        try {
            String rawCmds = "FIRST NAME";
            String printer = "Generic / Text Only (Copy 3)"; // debe tener 
            //el mismo nombre que la impresora 
            PrintService ps = PrintServiceMatcher.findPrinter(printer);
            if (ps != null) {

                PrintRaw p = new PrintRaw(ps, rawCmds);
                /**
                 * p.clear(); p.append("N\n"); p.append("^XA\n");
                 * p.append("^FO350,355^A0N,30,30^FD\"" + title + "\"\n");
                 * p.append("^XZ\n");
                p.append("P1,1\n");*
                 */
                p.clear();
                p.append("\u001B\u0040"); //reset printer 
                //p.append("\u001B"+"\u0045"+"\u0001"+"\r");//Negrita
                /**
                 * ********************************************************
                 */
                XMLConfiguracion xml = new XMLConfiguracion();
                String[] comentariosFactura = xml.leerInfoParaFactura();
                String[] infoEmpresa = xml.leerInfoEmpresaXML();
                p.append("\u001B" + "\u0061" + "\u0001" + "\r");//*** Centrado
                p.append(infoEmpresa[0]+"\r\n");
                p.append(infoEmpresa[1]+"\r\n");
                p.append("Tel: "+infoEmpresa[4]+"\r\n");
                p.append("Ced Jur: "+infoEmpresa[3]+"\r\n");
                 if(!infoEmpresa[5].equals("")){
                    p.append(infoEmpresa[5]+"\r\n");
                }
                p.append("\u001B" + "\u0064" + "\u0001" + "\r");//*** 1lineas
                p.append(xml.ObtenerSlogan()+"\r\n");
                p.append("\u001B" + "\u0064" + "\u0001" + "\r");//*** 1lineas
                if (!comentariosFactura[0].equals("")) {
                    p.append(comentariosFactura[0] + "\r\n");
                }
                /**
                 * *******************************************************
                 */
                //p.append("\u001B"+"\u0045"+"\u0000"+"\r");//QuitalaNegrita
                /**
                 * ********************************************************
                 */

                p.append("\u001B" + "\u0061" + "\u0000" + "\r");//Quita Centrado
                p.append("Fecha   : \t " + date + "\r\n");
                p.append("NoFact  : \t " + numFact + "\r\n");
                p.append("Cliente : \t " + cliente + "\r\n");
                p.append("Vendedor: \t " + vendedor + "\r\n");
                p.append("CANT. \t DESCRIPCION \t      TOTAL\r\n");
                p.append("----  ----------------       ------\r\n");
                /**
                 * ********************************************************
                 */
                MyTableModel_FACT dtm = (MyTableModel_FACT) jTable_Factura.getModel();
                int nRow = dtm.getRowCount();
                for (int i = 0; i < nRow; i++) {
                    String Producto = dtm.getValueAt(i, 1).toString();
                    if (!Producto.equals("")) {
                        String cantidad = dtm.getValueAt(i, 2).toString();
                        String subtotal = dtm.getValueAt(i, 4).toString();
                        p.append("" + Producto + "   \r\n");
                        p.append("" + cantidad + "                           "
                                + "" + subtotal + "   \r\n");
                    }

                }

                //p.append("----  ----------------    -----------   \r\n");
                //p.append("----------------------------------------\r\n"); 
                /*
                 * Importante solo se esta usando la parte hexadecimal
                 * //u00HEX
                 * junto con el archivo ESC-POS-Programming-Guide
                 */
                /*
                 * Para centrado y Derecha se esta usando la descripcion 
                 * que viene en esta pagina donde dice other 
                 * http://www.lprng.com/DISTRIB/RESOURCES/PPD/epson.htm 
                 * (FAVORITOS)
                 */
                String pagoTarjeta = "C"+this.jFormattedTextField_pagoVueltoTarjeta.getText();
                String pagoContado = "C"+this.jFormattedTextField_pagoVueltoContado.getText();
                String vuelto = "C"+this.jFormattedTextField_vuelto.getText();
                p.append("\u001B" + "\u0061" + "\u0002" + "\r");//*** Derecha
                p.append("\u001B" + "\u0064" + "\u0003" + "\r");//*** 1lineas
                String subto = " SUB TOTAL : \t " + subtotalFact + "";
                String subtoCantidad = this.fill(subto, 28, " ");
                p.append(subtoCantidad + "\r\n");
                p.append(this.fill(" DESCTO  % : \t " + desc + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" DESCUENTO : \t " + rebaja + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" PAGO TARJ : \t " + pagoTarjeta + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" PAGO CONT : \t " + pagoContado + "", subtoCantidad.length(), " ") + "\r\n");
                p.append("---------------------------\r\n");
                p.append(this.fill(" T O T A L   : \t " + totalFact + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" V U E L T O : \t " + vuelto + "", subtoCantidad.length(), " ") + "\r\n");
                p.append("\u001B" + "\u0061" + "\u0000" + "\r");//Quita Centrado
                p.append("\u001B" + "\u0061" + "\u0001" + "\r");//*** Centrado
                p.append("\u001B" + "\u0064" + "\u0004" + "\r");//*** 3lineas
                if (!comentariosFactura[1].equals("")) {
                    p.append(comentariosFactura[1] + "\r\n");
                }
                p.append("\u001B\u0040");//reset printer
                p.append("\u001B" + "\u0064" + "\u0008" + "\r");//*** 10lineas**/
                p.append("\u001D" + "\u0056" + "\u0001" + "\r");//*** CutPaper
                
                //p.append("-Texto sin negrita-\r\n");
                //p.append("-XXXXXXXXXXXXXX-\r\n");
                return p.print();

            } else {
                System.err.println("No encontro ninguna impresora");
                return false;
            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
     /**
     * Imprime la factura.
     *
     * @param numFact //Debe ser Generico.
     * @param date
     * @param totalFact
     * @return
     */
    private boolean imprimirDevolucion(String numFact, String date, String totalFact, String subtotalFact, String desc, String rebaja, String cliente,
            String vendedor) {
        try {
            String rawCmds = "FIRST NAME";
            String printer = "Generic / Text Only (Copy 3)"; // debe tener 
            //el mismo nombre que la impresora 
            PrintService ps = PrintServiceMatcher.findPrinter(printer);
            if (ps != null) {

                PrintRaw p = new PrintRaw(ps, rawCmds);
                /**
                 * p.clear(); p.append("N\n"); p.append("^XA\n");
                 * p.append("^FO350,355^A0N,30,30^FD\"" + title + "\"\n");
                 * p.append("^XZ\n");
                p.append("P1,1\n");*
                 */
                p.clear();
                p.append("\u001B\u0040"); //reset printer 
                //p.append("\u001B"+"\u0045"+"\u0001"+"\r");//Negrita
                /**
                 * ********************************************************
                 */
                XMLConfiguracion xml = new XMLConfiguracion();
                String[] comentariosFactura = xml.leerInfoParaFactura();
                String[] infoEmpresa = xml.leerInfoEmpresaXML();
                p.append("\u001B" + "\u0061" + "\u0001" + "\r");//*** Centrado
                p.append(infoEmpresa[0]+"\r\n");
                p.append(infoEmpresa[1]+"\r\n");
                p.append("Tel: "+infoEmpresa[4]+"\r\n");
                p.append("Ced Jur: "+infoEmpresa[3]+"\r\n");
                 if(!infoEmpresa[5].equals("")){
                    p.append(infoEmpresa[5]+"\r\n");
                }
                p.append("\u001B" + "\u0064" + "\u0001" + "\r");//*** 1lineas
                p.append(xml.ObtenerSlogan()+"\r\n");
                p.append("\u001B" + "\u0064" + "\u0001" + "\r");//*** 1lineas
                if (!comentariosFactura[0].equals("")) {
                    p.append(comentariosFactura[0] + "\r\n");
                }
                /**
                 * *******************************************************
                 */
                //p.append("\u001B"+"\u0045"+"\u0000"+"\r");//QuitalaNegrita
                /**
                 * ********************************************************
                 */

                p.append("\u001B" + "\u0061" + "\u0000" + "\r");//Quita Centrado
                p.append("Fecha   : \t " + date + "\r\n");
                p.append("NoDev   : \t " + numFact + "\r\n");
                p.append("Cliente : \t " + cliente + "\r\n");
                p.append("Vendedor: \t " + vendedor + "\r\n");
                p.append("CANT. \t DESCRIPCION \t      TOTAL\r\n");
                p.append("----  ----------------       ------\r\n");
                /**
                 * ********************************************************
                 */
                MyTableModel_FACT dtm = (MyTableModel_FACT) jTable_Factura.getModel();
                int nRow = dtm.getRowCount();
                for (int i = 0; i < nRow; i++) {
                    String Producto = dtm.getValueAt(i, 1).toString();
                    if (!Producto.equals("")) {
                        String cantidad = dtm.getValueAt(i, 2).toString();
                        String subtotal = dtm.getValueAt(i, 4).toString();
                        p.append("" + Producto + "   \r\n");
                        p.append("" + cantidad + "                           "
                                + "" + subtotal + "   \r\n");
                    }

                }

                //p.append("----  ----------------    -----------   \r\n");
                //p.append("----------------------------------------\r\n"); 
                /*
                 * Importante solo se esta usando la parte hexadecimal
                 * //u00HEX
                 * junto con el archivo ESC-POS-Programming-Guide
                 */
                /*
                 * Para centrado y Derecha se esta usando la descripcion 
                 * que viene en esta pagina donde dice other 
                 * http://www.lprng.com/DISTRIB/RESOURCES/PPD/epson.htm 
                 * (FAVORITOS)
                 */
                p.append("\u001B" + "\u0061" + "\u0002" + "\r");//*** Derecha
                p.append("\u001B" + "\u0064" + "\u0003" + "\r");//*** 1lineas
                String subto = " SUB TOTAL : \t " + subtotalFact + "";
                String subtoCantidad = this.fill(subto, 28, " ");
                p.append(subtoCantidad + "\r\n");
                p.append(this.fill(" DESCTO  % : \t " + desc + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" DESCUENTO : \t " + rebaja + "", subtoCantidad.length(), " ") + "\r\n");
                p.append("---------------------------\r\n");
                p.append(this.fill(" T O T A L   : \t " + totalFact + "", subtoCantidad.length(), " ") + "\r\n");
                p.append("\u001B" + "\u0061" + "\u0000" + "\r");//Quita Centrado
                p.append("\u001B" + "\u0061" + "\u0001" + "\r");//*** Centrado
                p.append("\u001B" + "\u0064" + "\u0004" + "\r");//*** 3lineas
                if (!comentariosFactura[1].equals("")) {
                    p.append(comentariosFactura[1] + "\r\n");
                }
                p.append("\u001B\u0040");//reset printer
                p.append("\u001B" + "\u0064" + "\u0008" + "\r");//*** 10lineas**/
                p.append("\u001D" + "\u0056" + "\u0001" + "\r");//*** CutPaper
                
                //p.append("-Texto sin negrita-\r\n");
                //p.append("-XXXXXXXXXXXXXX-\r\n");
                return p.print();

            } else {
                System.err.println("No encontro ninguna impresora");
                return false;
            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    /**
     * Imprime el apartado o el credito.
     *
     * @param numFact 
     * @param date
     * @param totalFact
     * @return
     */
    private boolean imprimirApartadoCredito(String numFact, String date, String totalFact, String subtotalFact, String desc, String rebaja, String cliente,
            String vendedor) {
        try {
            String rawCmds = "FIRST NAME";
            String printer = "Generic / Text Only (Copy 3)"; // debe tener 
            //el mismo nombre que la impresora 
            PrintService ps = PrintServiceMatcher.findPrinter(printer);
            if (ps != null) {

                PrintRaw p = new PrintRaw(ps, rawCmds);
                p.clear();
                p.append("\u001B\u0040"); //reset printer 
           
                XMLConfiguracion xml = new XMLConfiguracion();
                String[] comentariosFactura = xml.leerInfoParaFactura();
                String[] infoEmpresa = xml.leerInfoEmpresaXML();
                p.append("\u001B" + "\u0061" + "\u0001" + "\r");//*** Centrado
                p.append(infoEmpresa[0]+"\r\n");
                p.append(infoEmpresa[1]+"\r\n");
                p.append("Tel: "+infoEmpresa[4]+"\r\n");
                p.append("Ced Jur: "+infoEmpresa[3]+"\r\n");
                 if(!infoEmpresa[5].equals("")){
                    p.append(infoEmpresa[5]+"\r\n");
                }
                p.append("\u001B" + "\u0064" + "\u0001" + "\r");//*** 1lineas
                p.append(xml.ObtenerSlogan()+"\r\n");
                p.append("\u001B" + "\u0064" + "\u0001" + "\r");//*** 1lineas
                if (!comentariosFactura[0].equals("")) {
                    p.append(comentariosFactura[0] + "\r\n");
                }
                p.append("\u001B" + "\u0061" + "\u0000" + "\r");//Quita Centrado
                p.append("Fecha   : \t " + date + "\r\n");
                p.append("NoFact  : \t " + numFact + "\r\n");
                p.append("Cliente : \t " + cliente + "\r\n");
                p.append("Vendedor: \t " + vendedor + "\r\n");
                p.append("CANT. \t DESCRIPCION \t      TOTAL\r\n");
                p.append("----  ----------------       ------\r\n");
                /**
                 * ********************************************************
                 */
                MyTableModel_FACT dtm = (MyTableModel_FACT) jTable_Factura.getModel();
                int nRow = dtm.getRowCount();
                for (int i = 0; i < nRow; i++) {
                    String Producto = dtm.getValueAt(i, 1).toString();
                    if (!Producto.equals("")) {
                        String cantidad = dtm.getValueAt(i, 2).toString();
                        String subtotal = dtm.getValueAt(i, 4).toString();
                        p.append("" + Producto + "   \r\n");
                        p.append("" + cantidad + "                           "
                                + "" + subtotal + "   \r\n");
                    }

                }

              
                String abono = this.jFormattedTextField_totalFact.getText();
                BigDecimal saldo = this.corregirDato(totalFact).subtract(this.corregirDato(abono));
                String pagoTarjeta = "C"+this.jFormattedTextField_pagoVueltoTarjeta.getText();
                String pagoContado = "C"+this.jFormattedTextField_pagoVueltoContado.getText();
                String vuelto = "C"+this.jFormattedTextField_vuelto.getText();
                p.append("\u001B" + "\u0061" + "\u0002" + "\r");//*** Derecha
                p.append("\u001B" + "\u0064" + "\u0003" + "\r");//*** 1lineas
                String subto = " SUB TOTAL : \t " + subtotalFact + "";
                String subtoCantidad = this.fill(subto, 28, " ");
                p.append(subtoCantidad + "\r\n");
                p.append(this.fill(" DESCTO  % : \t " + desc + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" DESCUENTO : \t " + rebaja + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" TOTAL     : \t " + totalFact + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" PAGO TARJ : \t " + pagoTarjeta + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" PAGO CONT : \t " + pagoContado + "", subtoCantidad.length(), " ") + "\r\n");
                p.append("---------------------------\r\n");
                p.append(this.fill(" A B O N O   : \t " + abono + "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" S A L D O   : \t " +"C"+saldo.toString()+ "", subtoCantidad.length(), " ") + "\r\n");
                p.append(this.fill(" V U E L T O : \t " + vuelto + "", subtoCantidad.length(), " ") + "\r\n");
                p.append("\u001B" + "\u0061" + "\u0000" + "\r");//Quita Centrado
                p.append("\u001B" + "\u0061" + "\u0001" + "\r");//*** Centrado
                p.append("\u001B" + "\u0064" + "\u0004" + "\r");//*** 3lineas
                if (!comentariosFactura[1].equals("")) {
                    p.append(comentariosFactura[1] + "\r\n");
                }
                p.append("\u001B\u0040");//reset printer
                p.append("\u001B" + "\u0064" + "\u0008" + "\r");//*** 10lineas**/
                p.append("\u001D" + "\u0056" + "\u0001" + "\r");//*** CutPaper
               
                return p.print();

            } else {
                System.err.println("No encontro ninguna impresora");
                return false;
            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    public String fill(int length, String with) {
        StringBuilder sb = new StringBuilder(length);
        while (sb.length() < length) {
            sb.append(with);
        }
        return sb.toString();
    }

    public String fill(String value, int length, String with) {

        StringBuilder result = new StringBuilder(length);
        result.append(value);
        result.append(fill(Math.max(0, length - value.length()), with));

        return result.toString();

    }

    public void cargarProductosFact(MyTableModel_FACT model) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verProductosPorFactura(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
        Object[][] ProductosdeFactura = AdminBD.getData();
        int numFilas = ProductosdeFactura.length;
        for (int row = 0; row < numFilas; row++) {
            Object[] producto = ProductosdeFactura[row];
            String codArticulo = producto[0].toString();
            String nombre = producto[1].toString();
            BigDecimal cantidad = this.StringtoBigDecimal(producto[2].toString());
            BigDecimal precioVenta = this.StringtoBigDecimal(producto[3].toString());
            model.addRow(1);
            model.setValueAt(codArticulo, row, 0);
            model.setValueAt(nombre, row, 1);
            model.setValueAt(cantidad, row, 2);
            model.setValueAt(precioVenta, row, 3);
            model.setValueAt(precioVenta.multiply(cantidad), row, 4);

        }
    }

    /**
     * Este metodo convierte un string que es un decimal a bigdecimal
     *
     * @param numero
     * @return
     */
    private BigDecimal StringtoBigDecimal(String numero) {
        DecimalFormat decimalfC = (DecimalFormat) NumberFormat.getInstance();
        decimalfC.setParseBigDecimal(true);
        BigDecimal numeroCorregido = null;
        try {
            numeroCorregido = (BigDecimal) decimalfC.parseObject(numero);
        } catch (ParseException ex) {
            Logger.getLogger(JPanel_VerFactura.class.getName()).log(Level.SEVERE, null, ex);
        }
        return numeroCorregido;

    }

    public void agregarListenerRenders() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        //Gana la atencion en el panel
        jTable_Factura.requestFocus();
        jTable_Factura.changeSelection(0, 0, false, false);
        //AGREGA EL LISTENER QUE PERMITE HACER TODOS LOS EVENTOS DENTRO DE LA 
        //TABLA DE FACTURA //IMPORTANTE ESTOS EVENTOS ESTAN EN LA CLASE DE
        //MY TABLE MODEL LISTENER EN el metodo: tableChanged(TableModelEvent e)
        this.jTable_Factura.getModel().addTableModelListener(
                new MyTableModelListener_FACT(this.jTable_Factura, "",
                        this.jFormattedTextField_SubTotal, AdminBD));
        //Permite que la primera columna de Codigos se desplace segun lo que
        // haya en la base de datos
        AdminBD.verCodigos();
        //Si no existen productos en la base que no los carge al editor
        if (AdminBD.getData().length > 0) {
            this.cargarSeleccionadorProductos();
        }
        //Costumisando Precio y Cantidad (Solo van a permitir numeros)
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);

        this.jTable_Factura.getColumnModel().getColumn(2).
                setCellRenderer(rightRenderer);
        this.jTable_Factura.getColumnModel().getColumn(3).
                setCellRenderer(new CurrencyRender());
        this.jTable_Factura.getColumnModel().getColumn(4).
                setCellRenderer(new CurrencyRender());
        this.jTable_Factura.getColumnModel().getColumn(2).
                setCellEditor(new EditorDeCelda_Cantidad());
        this.jTable_Factura.getColumnModel().getColumn(3).
                setCellEditor(new EditorDeCeldaNumeros());
        //Demasiado importante ******Permite que se pueda editar apenas se 
        //ingresan datos*****
        this.jTable_Factura.setSurrendersFocusOnKeystroke(true);

        

    }

    private void modificaFactura() {
        //Hace la factura vieja en estado inhabilitada
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.eliminarFacturaPorModificacion(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
    }

    private void devolverProductos() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verProductosPorFactura(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
        Object[][] ProductosFactura = AdminBD.getData();
        int numFilas = ProductosFactura.length;
        for (int row = 0; row < numFilas; row++) {
            Object[] producto = ProductosFactura[row];
            String codArticulo = producto[0].toString();
            int cantidadTotal = AdminBD.verCantidadInvGeneral(codArticulo);
            int cantidad = Integer.parseInt(producto[2].toString());
            AdminBD.actualizarCantidadInventario(codArticulo, cantidadTotal + cantidad);

        }
    }
     private void devolverProductosDevolucion() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verProductosPorDevolucion(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
        Object[][] ProductosDev = AdminBD.getData();
        int numFilas = ProductosDev.length;
        for (int row = 0; row < numFilas; row++) {
            Object[] producto = ProductosDev[row];
            String codArticulo = producto[0].toString();
            int cantidadTotal = AdminBD.verCantidadInvGeneral(codArticulo);
            int cantidad = Integer.parseInt(producto[2].toString());
            AdminBD.actualizarCantidadInventario(codArticulo, cantidadTotal + cantidad);

        }
    }
    private void cargarSeleccionadorProductos() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verCodigos();
        String[] idproductos = this.obtenerFila(AdminBD.getData());
        this.jTable_Factura.getColumnModel().getColumn(0).
                setCellEditor(new SeleccionadorEditor(idproductos, jTable_Factura));

    }

    private void crearApartado(BigDecimal pagoTarjeta,BigDecimal pagoContado, String Fecha) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        int idFactura = Integer.parseInt(this.jLabel_NumerodeFact.getText());
        int idVersionFacturasProducto = AdminBD.verVersionDEFacturaActiva(idFactura);
        String totalFacturaSinCorregir = this.jFormattedTextField_Total.getText();
        BigDecimal totalFact = this.corregirDato(totalFacturaSinCorregir);
        AdminBD.insertarFacturasPendientes(idFactura, totalFact, Fecha, idVersionFacturasProducto);
        AdminBD.insertarPago(pagoTarjeta,pagoContado,idFactura, idVersionFacturasProducto);
    }

    private boolean guardarDev() {
        if (jTable_Factura.isEditing()) {
            jTable_Factura.getCellEditor().cancelCellEditing();

        }
        this.crearDev();
        this.guardarProductosDev();
        return true;
    }

    private void crearDev() {
         
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        String Cliente = this.jFormattedTextField_Cliente.getText();
        int idCliente = AdminBD.veridCliente(Cliente);
        int idFactura = Integer.parseInt(this.jLabel_NumerodeFact.getText());
        
//        String seller = ManejoDeArchivos.XMLConfiguracion.getInstance().ObtenerUsuario();
        String seller = "admin";
        int idVendedor = AdminBD.veridVendedor(seller);
        String detalle = this.jTextField_Detalle.getText();
        String totalFacturaSinCorregir = this.jFormattedTextField_Total.getText();
        BigDecimal totalFact = this.corregirDato(totalFacturaSinCorregir);
        String DescuentoSinCorregir = this.jFormattedTextField_desc.getText();
        DecimalFormat decimaldesc = (DecimalFormat) NumberFormat.getInstance();
        decimaldesc.setParseBigDecimal(true);
        BigDecimal descuento = null;
        try {
            descuento = (BigDecimal) decimaldesc.parseObject(DescuentoSinCorregir);
        } catch (ParseException ex) {
            Logger.getLogger(MyTableModelListener_FACT.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
//        System.out.println(idFactura+" "+descuento+" "+idCliente+" "+idVendedor+" "+detalle+" "+totalFact+" ");
        AdminBD.crearDevolucion(idFactura, descuento,idCliente, idVendedor,
                CONCEPT_DEVOLUCION, detalle, totalFact, "A");
    }

    private void guardarProductosDev() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        String[][] infoTablaFact = this.obtenerInfoTablaFact();
        int rows = infoTablaFact.length;
        int idFactura = Integer.parseInt(this.jLabel_NumerodeFact.getText());
        //Recorre la informacion de la tabla para obtener los datos para 
        //insertar los productos en la factura
        for (int i = 0; i < rows; i++) {
            //Si la fila esta vacia
            if (model.getValueAt(i, 0) != "") {
                String idProducto = infoTablaFact[i][0];
                int idVersion = AdminBD.veridVersionActivaProductoPorCodigo(idProducto);
                String CantidadSinCorregir = infoTablaFact[i][2].toString();
                BigDecimal cantidadB = this.StringtoBigDecimal(CantidadSinCorregir);
                int cantidad = cantidadB.intValue();
                String precioSinCorregir = infoTablaFact[i][3];
                BigDecimal PrecioVenta = this.corregirDato(precioSinCorregir);
                int idVersionFacturasProducto = AdminBD.verVersionDEDevolucionActiva(idFactura);
                //System.out.println(idProducto+" "+idVersion+" "+cantidad+" "+idFactura+" "+PrecioVenta+" "+idVersionFacturasProducto);
                
                if(_callType == DEVOLUCION_CALL){
                    this.crearMovimiento("Devolucion Num "+""+idFactura, PrecioVenta.multiply(cantidadB),1);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                
                }
                if(_callType == MOD_DEV_CALL){
                    this.eliminarMovimiento("Devolucion Num "+""+idFactura);
                    this.crearMovimiento("Devolucion Num "+""+idFactura, PrecioVenta.multiply(cantidadB),1);
                    this.guardaProductoEnMovimiento(idProducto, idVersion, cantidad, PrecioVenta);
                
                }
                
                 AdminBD.insertarProductoCantidadDev(idProducto, idVersion,
                        cantidad, idFactura, PrecioVenta, idVersionFacturasProducto);

            }
        }
    }

    public void cargarInfoDev() {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verInfoDevolucion(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
        Object[][] dataInfoFactura = AdminBD.getData();
        Object[] datosInfoFactura = dataInfoFactura[0];
        String fecha = datosInfoFactura[0].toString();
        String cliente = datosInfoFactura[1].toString();
        String totalFact = datosInfoFactura[3].toString();
        String detalle = datosInfoFactura[4].toString();
        String descuento = datosInfoFactura[5].toString();
        this.jFormattedTextField_Cliente.setText(cliente);
        this.jLabel_Fecha.setText(fecha);
        this.jTextField_Detalle.setText(detalle);
        BigDecimal totalFacturado = this.StringtoBigDecimal(totalFact);
        BigDecimal descuentoD = this.StringtoBigDecimal(descuento);
        BigDecimal subtotal = totalFacturado.divide(new BigDecimal("1.00").subtract(descuentoD.divide(new BigDecimal("100.00"))));
        this.jFormattedTextField_DescuentoTotal.setValue(totalFacturado.subtract(subtotal));
        this.jFormattedTextField_SubTotal.setValue(subtotal);
        this.jFormattedTextField_Total.setValue(totalFacturado);
        this.jFormattedTextField_desc.setValue(descuentoD);
    }

    public void cargarProductosDevolucion() {
        MyTableModel_FACT model = (MyTableModel_FACT) jTable_Factura.getModel();
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.verProductosPorDevolucion(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
        Object[][] ProductosdeFactura = AdminBD.getData();
        int numFilas = ProductosdeFactura.length;
        for (int row = 0; row < numFilas; row++) {
            Object[] producto = ProductosdeFactura[row];
            String codArticulo = producto[0].toString();
            String nombre = producto[1].toString();
            BigDecimal cantidad = this.StringtoBigDecimal(producto[2].toString());
            BigDecimal precioVenta = this.StringtoBigDecimal(producto[3].toString());
            model.addRow(1);
            model.setValueAt(codArticulo, row, 0);
            model.setValueAt(nombre, row, 1);
            model.setValueAt(cantidad, row, 2);
            model.setValueAt(precioVenta, row, 3);
            model.setValueAt(precioVenta.multiply(cantidad), row, 4);
        }
    }

    private void modificaDevolucion() {
        //Hace la devolucion vieja en estado inhabilitada
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.eliminarDevolucionPorModificacion(Integer.parseInt(this.jLabel_NumerodeFact.getText()));
    }
    
    
    private void crearMovimiento(String detalle, BigDecimal precioProd, int movimiento) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.insertarmovimiento(detalle, movimiento, 1, precioProd);
    }

    private void guardaProductoEnMovimiento(String idProducto, int idVersion, int cantidadMov, BigDecimal PrecioVenta) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        int idMovimiento = AdminBD.ObtenerUltimoidMovimiento();
        AdminBD.insertarProductoCantidadMovimiento(idProducto, idVersion, idMovimiento, cantidadMov, PrecioVenta);
    }

    private void eliminarMovimiento(String detalle) {
        Direct_Control_BD AdminBD = Direct_Control_BD.getInstance();
        AdminBD.eliminarMovimiento(detalle);
    }

    private void regresar() {
        JF_Facturacion.getInstance().restoreUser();
        JF_Facturacion.getInstance().refreshActiveTable();
        JF_Facturacion.getInstance().backOnWindow();
    }
}
